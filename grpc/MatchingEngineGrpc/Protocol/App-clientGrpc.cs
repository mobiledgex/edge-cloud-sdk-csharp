// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app-client.proto
// </auto-generated>
// Original file comments:
// Device service APIs
//
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace DistributedMatchEngine {
  public static partial class MatchEngineApi
  {
    static readonly string __ServiceName = "distributed_match_engine.MatchEngineApi";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::DistributedMatchEngine.RegisterClientRequest> __Marshaller_distributed_match_engine_RegisterClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.RegisterClientRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.RegisterClientReply> __Marshaller_distributed_match_engine_RegisterClientReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.RegisterClientReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.FindCloudletRequest> __Marshaller_distributed_match_engine_FindCloudletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.FindCloudletRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.FindCloudletReply> __Marshaller_distributed_match_engine_FindCloudletReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.FindCloudletReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.PlatformFindCloudletRequest> __Marshaller_distributed_match_engine_PlatformFindCloudletRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.PlatformFindCloudletRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.VerifyLocationRequest> __Marshaller_distributed_match_engine_VerifyLocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.VerifyLocationRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.VerifyLocationReply> __Marshaller_distributed_match_engine_VerifyLocationReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.VerifyLocationReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.GetLocationRequest> __Marshaller_distributed_match_engine_GetLocationRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.GetLocationRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.GetLocationReply> __Marshaller_distributed_match_engine_GetLocationReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.GetLocationReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.DynamicLocGroupRequest> __Marshaller_distributed_match_engine_DynamicLocGroupRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.DynamicLocGroupRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.DynamicLocGroupReply> __Marshaller_distributed_match_engine_DynamicLocGroupReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.DynamicLocGroupReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.AppInstListRequest> __Marshaller_distributed_match_engine_AppInstListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.AppInstListRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.AppInstListReply> __Marshaller_distributed_match_engine_AppInstListReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.AppInstListReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.FqdnListRequest> __Marshaller_distributed_match_engine_FqdnListRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.FqdnListRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.FqdnListReply> __Marshaller_distributed_match_engine_FqdnListReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.FqdnListReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.AppOfficialFqdnRequest> __Marshaller_distributed_match_engine_AppOfficialFqdnRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.AppOfficialFqdnRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.AppOfficialFqdnReply> __Marshaller_distributed_match_engine_AppOfficialFqdnReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.AppOfficialFqdnReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.QosPositionRequest> __Marshaller_distributed_match_engine_QosPositionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.QosPositionRequest.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.QosPositionKpiReply> __Marshaller_distributed_match_engine_QosPositionKpiReply = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.QosPositionKpiReply.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.ClientEdgeEvent> __Marshaller_distributed_match_engine_ClientEdgeEvent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.ClientEdgeEvent.Parser));
    static readonly grpc::Marshaller<global::DistributedMatchEngine.ServerEdgeEvent> __Marshaller_distributed_match_engine_ServerEdgeEvent = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::DistributedMatchEngine.ServerEdgeEvent.Parser));

    static readonly grpc::Method<global::DistributedMatchEngine.RegisterClientRequest, global::DistributedMatchEngine.RegisterClientReply> __Method_RegisterClient = new grpc::Method<global::DistributedMatchEngine.RegisterClientRequest, global::DistributedMatchEngine.RegisterClientReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "RegisterClient",
        __Marshaller_distributed_match_engine_RegisterClientRequest,
        __Marshaller_distributed_match_engine_RegisterClientReply);

    static readonly grpc::Method<global::DistributedMatchEngine.FindCloudletRequest, global::DistributedMatchEngine.FindCloudletReply> __Method_FindCloudlet = new grpc::Method<global::DistributedMatchEngine.FindCloudletRequest, global::DistributedMatchEngine.FindCloudletReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "FindCloudlet",
        __Marshaller_distributed_match_engine_FindCloudletRequest,
        __Marshaller_distributed_match_engine_FindCloudletReply);

    static readonly grpc::Method<global::DistributedMatchEngine.PlatformFindCloudletRequest, global::DistributedMatchEngine.FindCloudletReply> __Method_PlatformFindCloudlet = new grpc::Method<global::DistributedMatchEngine.PlatformFindCloudletRequest, global::DistributedMatchEngine.FindCloudletReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "PlatformFindCloudlet",
        __Marshaller_distributed_match_engine_PlatformFindCloudletRequest,
        __Marshaller_distributed_match_engine_FindCloudletReply);

    static readonly grpc::Method<global::DistributedMatchEngine.VerifyLocationRequest, global::DistributedMatchEngine.VerifyLocationReply> __Method_VerifyLocation = new grpc::Method<global::DistributedMatchEngine.VerifyLocationRequest, global::DistributedMatchEngine.VerifyLocationReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "VerifyLocation",
        __Marshaller_distributed_match_engine_VerifyLocationRequest,
        __Marshaller_distributed_match_engine_VerifyLocationReply);

    static readonly grpc::Method<global::DistributedMatchEngine.GetLocationRequest, global::DistributedMatchEngine.GetLocationReply> __Method_GetLocation = new grpc::Method<global::DistributedMatchEngine.GetLocationRequest, global::DistributedMatchEngine.GetLocationReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetLocation",
        __Marshaller_distributed_match_engine_GetLocationRequest,
        __Marshaller_distributed_match_engine_GetLocationReply);

    static readonly grpc::Method<global::DistributedMatchEngine.DynamicLocGroupRequest, global::DistributedMatchEngine.DynamicLocGroupReply> __Method_AddUserToGroup = new grpc::Method<global::DistributedMatchEngine.DynamicLocGroupRequest, global::DistributedMatchEngine.DynamicLocGroupReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AddUserToGroup",
        __Marshaller_distributed_match_engine_DynamicLocGroupRequest,
        __Marshaller_distributed_match_engine_DynamicLocGroupReply);

    static readonly grpc::Method<global::DistributedMatchEngine.AppInstListRequest, global::DistributedMatchEngine.AppInstListReply> __Method_GetAppInstList = new grpc::Method<global::DistributedMatchEngine.AppInstListRequest, global::DistributedMatchEngine.AppInstListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppInstList",
        __Marshaller_distributed_match_engine_AppInstListRequest,
        __Marshaller_distributed_match_engine_AppInstListReply);

    static readonly grpc::Method<global::DistributedMatchEngine.FqdnListRequest, global::DistributedMatchEngine.FqdnListReply> __Method_GetFqdnList = new grpc::Method<global::DistributedMatchEngine.FqdnListRequest, global::DistributedMatchEngine.FqdnListReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetFqdnList",
        __Marshaller_distributed_match_engine_FqdnListRequest,
        __Marshaller_distributed_match_engine_FqdnListReply);

    static readonly grpc::Method<global::DistributedMatchEngine.AppOfficialFqdnRequest, global::DistributedMatchEngine.AppOfficialFqdnReply> __Method_GetAppOfficialFqdn = new grpc::Method<global::DistributedMatchEngine.AppOfficialFqdnRequest, global::DistributedMatchEngine.AppOfficialFqdnReply>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetAppOfficialFqdn",
        __Marshaller_distributed_match_engine_AppOfficialFqdnRequest,
        __Marshaller_distributed_match_engine_AppOfficialFqdnReply);

    static readonly grpc::Method<global::DistributedMatchEngine.QosPositionRequest, global::DistributedMatchEngine.QosPositionKpiReply> __Method_GetQosPositionKpi = new grpc::Method<global::DistributedMatchEngine.QosPositionRequest, global::DistributedMatchEngine.QosPositionKpiReply>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "GetQosPositionKpi",
        __Marshaller_distributed_match_engine_QosPositionRequest,
        __Marshaller_distributed_match_engine_QosPositionKpiReply);

    static readonly grpc::Method<global::DistributedMatchEngine.ClientEdgeEvent, global::DistributedMatchEngine.ServerEdgeEvent> __Method_StreamEdgeEvent = new grpc::Method<global::DistributedMatchEngine.ClientEdgeEvent, global::DistributedMatchEngine.ServerEdgeEvent>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "StreamEdgeEvent",
        __Marshaller_distributed_match_engine_ClientEdgeEvent,
        __Marshaller_distributed_match_engine_ServerEdgeEvent);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for MatchEngineApi</summary>
    public partial class MatchEngineApiClient : grpc::ClientBase<MatchEngineApiClient>
    {
      /// <summary>Creates a new client for MatchEngineApi</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public MatchEngineApiClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for MatchEngineApi that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public MatchEngineApiClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected MatchEngineApiClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected MatchEngineApiClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///
      /// RegisterClient
      ///
      /// Registers the client with the closest Distributed Matching Engine (the
      /// nearest edge location in the Operator network) and validates the
      /// legitimacy of the mobile subscriber. All session information is encrypted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.RegisterClientReply RegisterClient(global::DistributedMatchEngine.RegisterClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClient(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// RegisterClient
      ///
      /// Registers the client with the closest Distributed Matching Engine (the
      /// nearest edge location in the Operator network) and validates the
      /// legitimacy of the mobile subscriber. All session information is encrypted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.RegisterClientReply RegisterClient(global::DistributedMatchEngine.RegisterClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_RegisterClient, null, options, request);
      }
      /// <summary>
      ///
      /// RegisterClient
      ///
      /// Registers the client with the closest Distributed Matching Engine (the
      /// nearest edge location in the Operator network) and validates the
      /// legitimacy of the mobile subscriber. All session information is encrypted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.RegisterClientReply> RegisterClientAsync(global::DistributedMatchEngine.RegisterClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return RegisterClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// RegisterClient
      ///
      /// Registers the client with the closest Distributed Matching Engine (the
      /// nearest edge location in the Operator network) and validates the
      /// legitimacy of the mobile subscriber. All session information is encrypted.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.RegisterClientReply> RegisterClientAsync(global::DistributedMatchEngine.RegisterClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_RegisterClient, null, options, request);
      }
      /// <summary>
      ///
      /// FindCloudlet
      ///
      /// Locates the most optimal edge computing footprint and allows the
      /// registered application to find the application backend by leveraging the
      /// location, application subscription, and service provider agreement. If
      /// there are no suitable cloudlet instances available, the client may connect
      /// to the application server located in the public cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.FindCloudletReply FindCloudlet(global::DistributedMatchEngine.FindCloudletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindCloudlet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// FindCloudlet
      ///
      /// Locates the most optimal edge computing footprint and allows the
      /// registered application to find the application backend by leveraging the
      /// location, application subscription, and service provider agreement. If
      /// there are no suitable cloudlet instances available, the client may connect
      /// to the application server located in the public cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.FindCloudletReply FindCloudlet(global::DistributedMatchEngine.FindCloudletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_FindCloudlet, null, options, request);
      }
      /// <summary>
      ///
      /// FindCloudlet
      ///
      /// Locates the most optimal edge computing footprint and allows the
      /// registered application to find the application backend by leveraging the
      /// location, application subscription, and service provider agreement. If
      /// there are no suitable cloudlet instances available, the client may connect
      /// to the application server located in the public cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FindCloudletReply> FindCloudletAsync(global::DistributedMatchEngine.FindCloudletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FindCloudletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// FindCloudlet
      ///
      /// Locates the most optimal edge computing footprint and allows the
      /// registered application to find the application backend by leveraging the
      /// location, application subscription, and service provider agreement. If
      /// there are no suitable cloudlet instances available, the client may connect
      /// to the application server located in the public cloud.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FindCloudletReply> FindCloudletAsync(global::DistributedMatchEngine.FindCloudletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_FindCloudlet, null, options, request);
      }
      /// <summary>
      ///
      /// PlatformFindCloudlet
      ///
      /// Similar to FindCloudlet, except uses a token for client data.
      /// This API is only applicable for Platform Applications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.FindCloudletReply PlatformFindCloudlet(global::DistributedMatchEngine.PlatformFindCloudletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlatformFindCloudlet(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// PlatformFindCloudlet
      ///
      /// Similar to FindCloudlet, except uses a token for client data.
      /// This API is only applicable for Platform Applications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.FindCloudletReply PlatformFindCloudlet(global::DistributedMatchEngine.PlatformFindCloudletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_PlatformFindCloudlet, null, options, request);
      }
      /// <summary>
      ///
      /// PlatformFindCloudlet
      ///
      /// Similar to FindCloudlet, except uses a token for client data.
      /// This API is only applicable for Platform Applications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FindCloudletReply> PlatformFindCloudletAsync(global::DistributedMatchEngine.PlatformFindCloudletRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PlatformFindCloudletAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// PlatformFindCloudlet
      ///
      /// Similar to FindCloudlet, except uses a token for client data.
      /// This API is only applicable for Platform Applications.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FindCloudletReply> PlatformFindCloudletAsync(global::DistributedMatchEngine.PlatformFindCloudletRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_PlatformFindCloudlet, null, options, request);
      }
      /// <summary>
      ///
      /// VerifyLocation
      ///
      /// Verifies that the GPS coordinates accurately report the actual location of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.VerifyLocationReply VerifyLocation(global::DistributedMatchEngine.VerifyLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// VerifyLocation
      ///
      /// Verifies that the GPS coordinates accurately report the actual location of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::DistributedMatchEngine.VerifyLocationReply VerifyLocation(global::DistributedMatchEngine.VerifyLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_VerifyLocation, null, options, request);
      }
      /// <summary>
      ///
      /// VerifyLocation
      ///
      /// Verifies that the GPS coordinates accurately report the actual location of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.VerifyLocationReply> VerifyLocationAsync(global::DistributedMatchEngine.VerifyLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return VerifyLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///
      /// VerifyLocation
      ///
      /// Verifies that the GPS coordinates accurately report the actual location of the device.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.VerifyLocationReply> VerifyLocationAsync(global::DistributedMatchEngine.VerifyLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_VerifyLocation, null, options, request);
      }
      public virtual global::DistributedMatchEngine.GetLocationReply GetLocation(global::DistributedMatchEngine.GetLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocation(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.GetLocationReply GetLocation(global::DistributedMatchEngine.GetLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetLocation, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.GetLocationReply> GetLocationAsync(global::DistributedMatchEngine.GetLocationRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetLocationAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.GetLocationReply> GetLocationAsync(global::DistributedMatchEngine.GetLocationRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetLocation, null, options, request);
      }
      public virtual global::DistributedMatchEngine.DynamicLocGroupReply AddUserToGroup(global::DistributedMatchEngine.DynamicLocGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUserToGroup(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.DynamicLocGroupReply AddUserToGroup(global::DistributedMatchEngine.DynamicLocGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AddUserToGroup, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.DynamicLocGroupReply> AddUserToGroupAsync(global::DistributedMatchEngine.DynamicLocGroupRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AddUserToGroupAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.DynamicLocGroupReply> AddUserToGroupAsync(global::DistributedMatchEngine.DynamicLocGroupRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AddUserToGroup, null, options, request);
      }
      public virtual global::DistributedMatchEngine.AppInstListReply GetAppInstList(global::DistributedMatchEngine.AppInstListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppInstList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.AppInstListReply GetAppInstList(global::DistributedMatchEngine.AppInstListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppInstList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.AppInstListReply> GetAppInstListAsync(global::DistributedMatchEngine.AppInstListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppInstListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.AppInstListReply> GetAppInstListAsync(global::DistributedMatchEngine.AppInstListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppInstList, null, options, request);
      }
      public virtual global::DistributedMatchEngine.FqdnListReply GetFqdnList(global::DistributedMatchEngine.FqdnListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFqdnList(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.FqdnListReply GetFqdnList(global::DistributedMatchEngine.FqdnListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetFqdnList, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FqdnListReply> GetFqdnListAsync(global::DistributedMatchEngine.FqdnListRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetFqdnListAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.FqdnListReply> GetFqdnListAsync(global::DistributedMatchEngine.FqdnListRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetFqdnList, null, options, request);
      }
      public virtual global::DistributedMatchEngine.AppOfficialFqdnReply GetAppOfficialFqdn(global::DistributedMatchEngine.AppOfficialFqdnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppOfficialFqdn(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::DistributedMatchEngine.AppOfficialFqdnReply GetAppOfficialFqdn(global::DistributedMatchEngine.AppOfficialFqdnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetAppOfficialFqdn, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.AppOfficialFqdnReply> GetAppOfficialFqdnAsync(global::DistributedMatchEngine.AppOfficialFqdnRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetAppOfficialFqdnAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::DistributedMatchEngine.AppOfficialFqdnReply> GetAppOfficialFqdnAsync(global::DistributedMatchEngine.AppOfficialFqdnRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetAppOfficialFqdn, null, options, request);
      }
      public virtual grpc::AsyncServerStreamingCall<global::DistributedMatchEngine.QosPositionKpiReply> GetQosPositionKpi(global::DistributedMatchEngine.QosPositionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetQosPositionKpi(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncServerStreamingCall<global::DistributedMatchEngine.QosPositionKpiReply> GetQosPositionKpi(global::DistributedMatchEngine.QosPositionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_GetQosPositionKpi, null, options, request);
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::DistributedMatchEngine.ClientEdgeEvent, global::DistributedMatchEngine.ServerEdgeEvent> StreamEdgeEvent(grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StreamEdgeEvent(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::DistributedMatchEngine.ClientEdgeEvent, global::DistributedMatchEngine.ServerEdgeEvent> StreamEdgeEvent(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_StreamEdgeEvent, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override MatchEngineApiClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new MatchEngineApiClient(configuration);
      }
    }

  }
}
#endregion
