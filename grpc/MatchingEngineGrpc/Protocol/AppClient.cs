// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: app-client.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DistributedMatchEngine {

  /// <summary>Holder for reflection information generated from app-client.proto</summary>
  public static partial class AppClientReflection {

    #region Descriptor
    /// <summary>File descriptor for app-client.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AppClientReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBhcHAtY2xpZW50LnByb3RvEhhkaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUa",
            "HGdvb2dsZS9hcGkvYW5ub3RhdGlvbnMucHJvdG8aCWxvYy5wcm90bxoPYXBw",
            "Y29tbW9uLnByb3RvIrQCChVSZWdpc3RlckNsaWVudFJlcXVlc3QSCwoDdmVy",
            "GAEgASgNEhAKCG9yZ19uYW1lGAIgASgJEhAKCGFwcF9uYW1lGAMgASgJEhAK",
            "CGFwcF92ZXJzGAQgASgJEhQKDGNhcnJpZXJfbmFtZRgFIAEoCRISCgphdXRo",
            "X3Rva2VuGAYgASgJEhYKDnVuaXF1ZV9pZF90eXBlGAggASgJEhEKCXVuaXF1",
            "ZV9pZBgJIAEoCRJHCgR0YWdzGGQgAygLMjkuZGlzdHJpYnV0ZWRfbWF0Y2hf",
            "ZW5naW5lLlJlZ2lzdGVyQ2xpZW50UmVxdWVzdC5UYWdzRW50cnkaKwoJVGFn",
            "c0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAFKBAgHEAhS",
            "B2NlbGxfaWQiqgIKE1JlZ2lzdGVyQ2xpZW50UmVwbHkSCwoDdmVyGAEgASgN",
            "EjUKBnN0YXR1cxgCIAEoDjIlLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5S",
            "ZXBseVN0YXR1cxIWCg5zZXNzaW9uX2Nvb2tpZRgDIAEoCRIYChB0b2tlbl9z",
            "ZXJ2ZXJfdXJpGAQgASgJEhYKDnVuaXF1ZV9pZF90eXBlGAUgASgJEhEKCXVu",
            "aXF1ZV9pZBgGIAEoCRJFCgR0YWdzGGQgAygLMjcuZGlzdHJpYnV0ZWRfbWF0",
            "Y2hfZW5naW5lLlJlZ2lzdGVyQ2xpZW50UmVwbHkuVGFnc0VudHJ5GisKCVRh",
            "Z3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIogCChNG",
            "aW5kQ2xvdWRsZXRSZXF1ZXN0EgsKA3ZlchgBIAEoDRIWCg5zZXNzaW9uX2Nv",
            "b2tpZRgCIAEoCRIUCgxjYXJyaWVyX25hbWUYAyABKAkSMwoMZ3BzX2xvY2F0",
            "aW9uGAQgASgLMh0uZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkxvYxJFCgR0",
            "YWdzGGQgAygLMjcuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkZpbmRDbG91",
            "ZGxldFJlcXVlc3QuVGFnc0VudHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASAB",
            "KAkSDQoFdmFsdWUYAiABKAk6AjgBSgQICBAJUgdjZWxsX2lkIuoBChtQbGF0",
            "Zm9ybUZpbmRDbG91ZGxldFJlcXVlc3QSCwoDdmVyGAEgASgNEhYKDnNlc3Np",
            "b25fY29va2llGAIgASgJEhQKDGNhcnJpZXJfbmFtZRgDIAEoCRIUCgxjbGll",
            "bnRfdG9rZW4YBCABKAkSTQoEdGFncxhkIAMoCzI/LmRpc3RyaWJ1dGVkX21h",
            "dGNoX2VuZ2luZS5QbGF0Zm9ybUZpbmRDbG91ZGxldFJlcXVlc3QuVGFnc0Vu",
            "dHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6",
            "AjgBIvgEChFGaW5kQ2xvdWRsZXRSZXBseRILCgN2ZXIYASABKA0SRgoGc3Rh",
            "dHVzGAIgASgOMjYuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkZpbmRDbG91",
            "ZGxldFJlcGx5LkZpbmRTdGF0dXMSDAoEZnFkbhgDIAEoCRIwCgVwb3J0cxgE",
            "IAMoCzIhLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBQb3J0EjgKEWNs",
            "b3VkbGV0X2xvY2F0aW9uGAUgASgLMh0uZGlzdHJpYnV0ZWRfbWF0Y2hfZW5n",
            "aW5lLkxvYxIaChJlZGdlX2V2ZW50c19jb29raWUYBiABKAkSUAoKcW9zX3Jl",
            "c3VsdBgHIAEoDjI8LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5GaW5kQ2xv",
            "dWRsZXRSZXBseS5Rb3NTZXNzaW9uUmVzdWx0EhUKDXFvc19lcnJvcl9tc2cY",
            "CCABKAkSQwoEdGFncxhkIAMoCzI1LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2lu",
            "ZS5GaW5kQ2xvdWRsZXRSZXBseS5UYWdzRW50cnkaKwoJVGFnc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiQQoKRmluZFN0YXR1cxIQ",
            "CgxGSU5EX1VOS05PV04QABIOCgpGSU5EX0ZPVU5EEAESEQoNRklORF9OT1RG",
            "T1VORBACIloKEFFvc1Nlc3Npb25SZXN1bHQSFQoRUU9TX05PVF9BVFRFTVBU",
            "RUQQABIXChNRT1NfU0VTU0lPTl9DUkVBVEVEEAESFgoSUU9TX1NFU1NJT05f",
            "RkFJTEVEEAIi2AQKH1Fvc1ByaW9yaXR5U2Vzc2lvbkNyZWF0ZVJlcXVlc3QS",
            "CwoDdmVyGAEgASgNEhYKDnNlc3Npb25fY29va2llGAIgASgJEhgKEHNlc3Np",
            "b25fZHVyYXRpb24YAyABKA0SGQoRaXBfdXNlcl9lcXVpcG1lbnQYBCABKAkS",
            "HQoVaXBfYXBwbGljYXRpb25fc2VydmVyGAUgASgJEhsKE3BvcnRfdXNlcl9l",
            "cXVpcG1lbnQYBiABKAkSHwoXcG9ydF9hcHBsaWNhdGlvbl9zZXJ2ZXIYByAB",
            "KAkSQQoLcHJvdG9jb2xfaW4YCCABKA4yLC5kaXN0cmlidXRlZF9tYXRjaF9l",
            "bmdpbmUuUW9zU2Vzc2lvblByb3RvY29sEkIKDHByb3RvY29sX291dBgJIAEo",
            "DjIsLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5Rb3NTZXNzaW9uUHJvdG9j",
            "b2wSPAoHcHJvZmlsZRgKIAEoDjIrLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2lu",
            "ZS5Rb3NTZXNzaW9uUHJvZmlsZRIYChBub3RpZmljYXRpb25fdXJpGAsgASgJ",
            "Eh8KF25vdGlmaWNhdGlvbl9hdXRoX3Rva2VuGAwgASgJElEKBHRhZ3MYZCAD",
            "KAsyQy5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuUW9zUHJpb3JpdHlTZXNz",
            "aW9uQ3JlYXRlUmVxdWVzdC5UYWdzRW50cnkaKwoJVGFnc0VudHJ5EgsKA2tl",
            "eRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEixwIKF1Fvc1ByaW9yaXR5U2Vz",
            "c2lvblJlcGx5EgsKA3ZlchgBIAEoDRIYChBzZXNzaW9uX2R1cmF0aW9uGAIg",
            "ASgNEjwKB3Byb2ZpbGUYAyABKA4yKy5kaXN0cmlidXRlZF9tYXRjaF9lbmdp",
            "bmUuUW9zU2Vzc2lvblByb2ZpbGUSEgoKc2Vzc2lvbl9pZBgEIAEoCRISCgpz",
            "dGFydGVkX2F0GAUgASgNEhIKCmV4cGlyZXNfYXQYBiABKA0SEwoLaHR0cF9z",
            "dGF0dXMYByABKA0SSQoEdGFncxhkIAMoCzI7LmRpc3RyaWJ1dGVkX21hdGNo",
            "X2VuZ2luZS5Rb3NQcmlvcml0eVNlc3Npb25SZXBseS5UYWdzRW50cnkaKwoJ",
            "VGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEimAIK",
            "H1Fvc1ByaW9yaXR5U2Vzc2lvbkRlbGV0ZVJlcXVlc3QSCwoDdmVyGAEgASgN",
            "EhYKDnNlc3Npb25fY29va2llGAIgASgJEjwKB3Byb2ZpbGUYAyABKA4yKy5k",
            "aXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuUW9zU2Vzc2lvblByb2ZpbGUSEgoK",
            "c2Vzc2lvbl9pZBgEIAEoCRJRCgR0YWdzGGQgAygLMkMuZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLlFvc1ByaW9yaXR5U2Vzc2lvbkRlbGV0ZVJlcXVlc3Qu",
            "VGFnc0VudHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBIsgCCh1Rb3NQcmlvcml0eVNlc3Npb25EZWxldGVSZXBseRIL",
            "CgN2ZXIYASABKA0SVAoGc3RhdHVzGAIgASgOMkQuZGlzdHJpYnV0ZWRfbWF0",
            "Y2hfZW5naW5lLlFvc1ByaW9yaXR5U2Vzc2lvbkRlbGV0ZVJlcGx5LkRlbGV0",
            "ZVN0YXR1cxJPCgR0YWdzGGQgAygLMkEuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5n",
            "aW5lLlFvc1ByaW9yaXR5U2Vzc2lvbkRlbGV0ZVJlcGx5LlRhZ3NFbnRyeRor",
            "CglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ASJG",
            "CgxEZWxldGVTdGF0dXMSEAoMUURFTF9VTktOT1dOEAASEAoMUURFTF9ERUxF",
            "VEVEEAESEgoOUURFTF9OT1RfRk9VTkQQAiKmAgoVVmVyaWZ5TG9jYXRpb25S",
            "ZXF1ZXN0EgsKA3ZlchgBIAEoDRIWCg5zZXNzaW9uX2Nvb2tpZRgCIAEoCRIU",
            "CgxjYXJyaWVyX25hbWUYAyABKAkSMwoMZ3BzX2xvY2F0aW9uGAQgASgLMh0u",
            "ZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkxvYxIYChB2ZXJpZnlfbG9jX3Rv",
            "a2VuGAUgASgJEkcKBHRhZ3MYZCADKAsyOS5kaXN0cmlidXRlZF9tYXRjaF9l",
            "bmdpbmUuVmVyaWZ5TG9jYXRpb25SZXF1ZXN0LlRhZ3NFbnRyeRorCglUYWdz",
            "RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUoECAYQB1IH",
            "Y2VsbF9pZCK7BQoTVmVyaWZ5TG9jYXRpb25SZXBseRILCgN2ZXIYASABKA0S",
            "TwoMdG93ZXJfc3RhdHVzGAIgASgOMjkuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5n",
            "aW5lLlZlcmlmeUxvY2F0aW9uUmVwbHkuVG93ZXJTdGF0dXMSXAoTZ3BzX2xv",
            "Y2F0aW9uX3N0YXR1cxgDIAEoDjI/LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2lu",
            "ZS5WZXJpZnlMb2NhdGlvblJlcGx5LkdQU0xvY2F0aW9uU3RhdHVzEiAKGGdw",
            "c19sb2NhdGlvbl9hY2N1cmFjeV9rbRgEIAEoARJFCgR0YWdzGGQgAygLMjcu",
            "ZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLlZlcmlmeUxvY2F0aW9uUmVwbHku",
            "VGFnc0VudHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUY",
            "AiABKAk6AjgBImgKC1Rvd2VyU3RhdHVzEhEKDVRPV0VSX1VOS05PV04QABIg",
            "ChxDT05ORUNURURfVE9fU1BFQ0lGSUVEX1RPV0VSEAESJAogTk9UX0NPTk5F",
            "Q1RFRF9UT19TUEVDSUZJRURfVE9XRVIQAiLnAQoRR1BTTG9jYXRpb25TdGF0",
            "dXMSDwoLTE9DX1VOS05PV04QABIQCgxMT0NfVkVSSUZJRUQQARIdChlMT0Nf",
            "TUlTTUFUQ0hfU0FNRV9DT1VOVFJZEAISHgoaTE9DX01JU01BVENIX09USEVS",
            "X0NPVU5UUlkQAxIdChlMT0NfUk9BTUlOR19DT1VOVFJZX01BVENIEAQSIAoc",
            "TE9DX1JPQU1JTkdfQ09VTlRSWV9NSVNNQVRDSBAFEhoKFkxPQ19FUlJPUl9V",
            "TkFVVEhPUklaRUQQBhITCg9MT0NfRVJST1JfT1RIRVIQByLRAQoSR2V0TG9j",
            "YXRpb25SZXF1ZXN0EgsKA3ZlchgBIAEoDRIWCg5zZXNzaW9uX2Nvb2tpZRgC",
            "IAEoCRIUCgxjYXJyaWVyX25hbWUYAyABKAkSRAoEdGFncxhkIAMoCzI2LmRp",
            "c3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5HZXRMb2NhdGlvblJlcXVlc3QuVGFn",
            "c0VudHJ5GisKCVRhZ3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiAB",
            "KAk6AjgBSgQIBBAFUgdjZWxsX2lkIvECChBHZXRMb2NhdGlvblJlcGx5EgsK",
            "A3ZlchgBIAEoDRJECgZzdGF0dXMYAiABKA4yNC5kaXN0cmlidXRlZF9tYXRj",
            "aF9lbmdpbmUuR2V0TG9jYXRpb25SZXBseS5Mb2NTdGF0dXMSFAoMY2Fycmll",
            "cl9uYW1lGAMgASgJEg0KBXRvd2VyGAQgASgEEjcKEG5ldHdvcmtfbG9jYXRp",
            "b24YBSABKAsyHS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuTG9jEkIKBHRh",
            "Z3MYZCADKAsyNC5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuR2V0TG9jYXRp",
            "b25SZXBseS5UYWdzRW50cnkaKwoJVGFnc0VudHJ5EgsKA2tleRgBIAEoCRIN",
            "CgV2YWx1ZRgCIAEoCToCOAEiOwoJTG9jU3RhdHVzEg8KC0xPQ19VTktOT1dO",
            "EAASDQoJTE9DX0ZPVU5EEAESDgoKTE9DX0RFTklFRBACIpUCChJBcHBJbnN0",
            "TGlzdFJlcXVlc3QSCwoDdmVyGAEgASgNEhYKDnNlc3Npb25fY29va2llGAIg",
            "ASgJEhQKDGNhcnJpZXJfbmFtZRgDIAEoCRIzCgxncHNfbG9jYXRpb24YBCAB",
            "KAsyHS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuTG9jEg0KBWxpbWl0GAYg",
            "ASgNEkQKBHRhZ3MYZCADKAsyNi5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUu",
            "QXBwSW5zdExpc3RSZXF1ZXN0LlRhZ3NFbnRyeRorCglUYWdzRW50cnkSCwoD",
            "a2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4AUoECAUQBlIHY2VsbF9pZCKf",
            "AQoLQXBwaW5zdGFuY2USEAoIYXBwX25hbWUYASABKAkSEAoIYXBwX3ZlcnMY",
            "AiABKAkSDAoEZnFkbhgDIAEoCRIwCgVwb3J0cxgEIAMoCzIhLmRpc3RyaWJ1",
            "dGVkX21hdGNoX2VuZ2luZS5BcHBQb3J0EhAKCG9yZ19uYW1lGAUgASgJEhoK",
            "EmVkZ2VfZXZlbnRzX2Nvb2tpZRgGIAEoCSLDAQoQQ2xvdWRsZXRMb2NhdGlv",
            "bhIUCgxjYXJyaWVyX25hbWUYASABKAkSFQoNY2xvdWRsZXRfbmFtZRgCIAEo",
            "CRIzCgxncHNfbG9jYXRpb24YAyABKAsyHS5kaXN0cmlidXRlZF9tYXRjaF9l",
            "bmdpbmUuTG9jEhAKCGRpc3RhbmNlGAQgASgBEjsKDGFwcGluc3RhbmNlcxgF",
            "IAMoCzIlLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBpbnN0YW5jZSLP",
            "AgoQQXBwSW5zdExpc3RSZXBseRILCgN2ZXIYASABKA0SQwoGc3RhdHVzGAIg",
            "ASgOMjMuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkFwcEluc3RMaXN0UmVw",
            "bHkuQUlTdGF0dXMSPQoJY2xvdWRsZXRzGAMgAygLMiouZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLkNsb3VkbGV0TG9jYXRpb24SQgoEdGFncxhkIAMoCzI0",
            "LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBJbnN0TGlzdFJlcGx5LlRh",
            "Z3NFbnRyeRorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIg",
            "ASgJOgI4ASI5CghBSVN0YXR1cxIQCgxBSV9VTkRFRklORUQQABIOCgpBSV9T",
            "VUNDRVNTEAESCwoHQUlfRkFJTBACIrUBCg9GcWRuTGlzdFJlcXVlc3QSCwoD",
            "dmVyGAEgASgNEhYKDnNlc3Npb25fY29va2llGAIgASgJEkEKBHRhZ3MYZCAD",
            "KAsyMy5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuRnFkbkxpc3RSZXF1ZXN0",
            "LlRhZ3NFbnRyeRorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVl",
            "GAIgASgJOgI4AUoECAMQBFIHY2VsbF9pZCJsCgdBcHBGcWRuEhAKCGFwcF9u",
            "YW1lGAEgASgJEhAKCGFwcF92ZXJzGAIgASgJEhAKCG9yZ19uYW1lGAMgASgJ",
            "Eg0KBWZxZG5zGAQgAygJEhwKFGFuZHJvaWRfcGFja2FnZV9uYW1lGAUgASgJ",
            "Ir0CCg1GcWRuTGlzdFJlcGx5EgsKA3ZlchgBIAEoDRI0CglhcHBfZnFkbnMY",
            "AyADKAsyIS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuQXBwRnFkbhJACgZz",
            "dGF0dXMYBCABKA4yMC5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuRnFkbkxp",
            "c3RSZXBseS5GTFN0YXR1cxI/CgR0YWdzGGQgAygLMjEuZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLkZxZG5MaXN0UmVwbHkuVGFnc0VudHJ5GisKCVRhZ3NF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIjkKCEZMU3Rh",
            "dHVzEhAKDEZMX1VOREVGSU5FRBAAEg4KCkZMX1NVQ0NFU1MQARILCgdGTF9G",
            "QUlMEAIi6QEKFkFwcE9mZmljaWFsRnFkblJlcXVlc3QSCwoDdmVyGAEgASgN",
            "EhYKDnNlc3Npb25fY29va2llGAIgASgJEjMKDGdwc19sb2NhdGlvbhgDIAEo",
            "CzIdLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5Mb2MSSAoEdGFncxhkIAMo",
            "CzI6LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBPZmZpY2lhbEZxZG5S",
            "ZXF1ZXN0LlRhZ3NFbnRyeRorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0K",
            "BXZhbHVlGAIgASgJOgI4ASKEAwoUQXBwT2ZmaWNpYWxGcWRuUmVwbHkSCwoD",
            "dmVyGAEgASgNEhkKEWFwcF9vZmZpY2lhbF9mcWRuGAIgASgJEhQKDGNsaWVu",
            "dF90b2tlbhgDIAEoCRJICgZzdGF0dXMYBCABKA4yOC5kaXN0cmlidXRlZF9t",
            "YXRjaF9lbmdpbmUuQXBwT2ZmaWNpYWxGcWRuUmVwbHkuQU9GU3RhdHVzEjAK",
            "BXBvcnRzGAUgAygLMiEuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkFwcFBv",
            "cnQSRgoEdGFncxhkIAMoCzI4LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5B",
            "cHBPZmZpY2lhbEZxZG5SZXBseS5UYWdzRW50cnkaKwoJVGFnc0VudHJ5EgsK",
            "A2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEiPQoJQU9GU3RhdHVzEhEK",
            "DUFPRl9VTkRFRklORUQQABIPCgtBT0ZfU1VDQ0VTUxABEgwKCEFPRl9GQUlM",
            "EAIi9gIKFkR5bmFtaWNMb2NHcm91cFJlcXVlc3QSCwoDdmVyGAEgASgNEhYK",
            "DnNlc3Npb25fY29va2llGAIgASgJEg0KBWxnX2lkGAMgASgEEk8KCWNvbW1f",
            "dHlwZRgLIAEoDjI8LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5EeW5hbWlj",
            "TG9jR3JvdXBSZXF1ZXN0LkRsZ0NvbW1UeXBlEhEKCXVzZXJfZGF0YRgMIAEo",
            "CRJICgR0YWdzGGQgAygLMjouZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkR5",
            "bmFtaWNMb2NHcm91cFJlcXVlc3QuVGFnc0VudHJ5GisKCVRhZ3NFbnRyeRIL",
            "CgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIj4KC0RsZ0NvbW1UeXBl",
            "EhEKDURMR19VTkRFRklORUQQABIOCgpETEdfU0VDVVJFEAESDAoIRExHX09Q",
            "RU4QAkoECA0QDlIHY2VsbF9pZCL5AQoURHluYW1pY0xvY0dyb3VwUmVwbHkS",
            "CwoDdmVyGAEgASgNEjUKBnN0YXR1cxgCIAEoDjIlLmRpc3RyaWJ1dGVkX21h",
            "dGNoX2VuZ2luZS5SZXBseVN0YXR1cxISCgplcnJvcl9jb2RlGAMgASgNEhQK",
            "DGdyb3VwX2Nvb2tpZRgFIAEoCRJGCgR0YWdzGGQgAygLMjguZGlzdHJpYnV0",
            "ZWRfbWF0Y2hfZW5naW5lLkR5bmFtaWNMb2NHcm91cFJlcGx5LlRhZ3NFbnRy",
            "eRorCglUYWdzRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4",
            "ASJWCgtRb3NQb3NpdGlvbhISCgpwb3NpdGlvbmlkGAEgASgDEjMKDGdwc19s",
            "b2NhdGlvbhgCIAEoCzIdLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5Mb2Mi",
            "SwoNQmFuZFNlbGVjdGlvbhINCgVyYXQyZxgBIAMoCRINCgVyYXQzZxgCIAMo",
            "CRINCgVyYXQ0ZxgDIAMoCRINCgVyYXQ1ZxgEIAMoCSLMAgoSUW9zUG9zaXRp",
            "b25SZXF1ZXN0EgsKA3ZlchgBIAEoDRIWCg5zZXNzaW9uX2Nvb2tpZRgCIAEo",
            "CRI4Cglwb3NpdGlvbnMYAyADKAsyJS5kaXN0cmlidXRlZF9tYXRjaF9lbmdp",
            "bmUuUW9zUG9zaXRpb24SFAoMbHRlX2NhdGVnb3J5GAQgASgFEj8KDmJhbmRf",
            "c2VsZWN0aW9uGAUgASgLMicuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkJh",
            "bmRTZWxlY3Rpb24SRAoEdGFncxhkIAMoCzI2LmRpc3RyaWJ1dGVkX21hdGNo",
            "X2VuZ2luZS5Rb3NQb3NpdGlvblJlcXVlc3QuVGFnc0VudHJ5GisKCVRhZ3NF",
            "bnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBSgQIBhAHUgdj",
            "ZWxsX2lkItICChRRb3NQb3NpdGlvbktwaVJlc3VsdBISCgpwb3NpdGlvbmlk",
            "GAEgASgDEjMKDGdwc19sb2NhdGlvbhgCIAEoCzIdLmRpc3RyaWJ1dGVkX21h",
            "dGNoX2VuZ2luZS5Mb2MSHAoUZGx1c2VydGhyb3VnaHB1dF9taW4YAyABKAIS",
            "HAoUZGx1c2VydGhyb3VnaHB1dF9hdmcYBCABKAISHAoUZGx1c2VydGhyb3Vn",
            "aHB1dF9tYXgYBSABKAISHAoUdWx1c2VydGhyb3VnaHB1dF9taW4YBiABKAIS",
            "HAoUdWx1c2VydGhyb3VnaHB1dF9hdmcYByABKAISHAoUdWx1c2VydGhyb3Vn",
            "aHB1dF9tYXgYCCABKAISEwoLbGF0ZW5jeV9taW4YCSABKAISEwoLbGF0ZW5j",
            "eV9hdmcYCiABKAISEwoLbGF0ZW5jeV9tYXgYCyABKAIilwIKE1Fvc1Bvc2l0",
            "aW9uS3BpUmVwbHkSCwoDdmVyGAEgASgNEjUKBnN0YXR1cxgCIAEoDjIlLmRp",
            "c3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5SZXBseVN0YXR1cxJIChBwb3NpdGlv",
            "bl9yZXN1bHRzGAMgAygLMi4uZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLlFv",
            "c1Bvc2l0aW9uS3BpUmVzdWx0EkUKBHRhZ3MYZCADKAsyNy5kaXN0cmlidXRl",
            "ZF9tYXRjaF9lbmdpbmUuUW9zUG9zaXRpb25LcGlSZXBseS5UYWdzRW50cnka",
            "KwoJVGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEi",
            "xAUKD0NsaWVudEVkZ2VFdmVudBIWCg5zZXNzaW9uX2Nvb2tpZRgBIAEoCRIa",
            "ChJlZGdlX2V2ZW50c19jb29raWUYAiABKAkSTQoKZXZlbnRfdHlwZRgDIAEo",
            "DjI5LmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5DbGllbnRFZGdlRXZlbnQu",
            "Q2xpZW50RXZlbnRUeXBlEjMKDGdwc19sb2NhdGlvbhgEIAEoCzIdLmRpc3Ry",
            "aWJ1dGVkX21hdGNoX2VuZ2luZS5Mb2MSMQoHc2FtcGxlcxgFIAMoCzIgLmRp",
            "c3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5TYW1wbGUSRgoSZGV2aWNlX2luZm9f",
            "c3RhdGljGAYgASgLMiouZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkRldmlj",
            "ZUluZm9TdGF0aWMSSAoTZGV2aWNlX2luZm9fZHluYW1pYxgHIAEoCzIrLmRp",
            "c3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5EZXZpY2VJbmZvRHluYW1pYxIUCgxj",
            "dXN0b21fZXZlbnQYCCABKAkSQQoEdGFncxhkIAMoCzIzLmRpc3RyaWJ1dGVk",
            "X21hdGNoX2VuZ2luZS5DbGllbnRFZGdlRXZlbnQuVGFnc0VudHJ5GisKCVRh",
            "Z3NFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBIq0BCg9D",
            "bGllbnRFdmVudFR5cGUSEQoNRVZFTlRfVU5LTk9XThAAEhkKFUVWRU5UX0lO",
            "SVRfQ09OTkVDVElPThABEh4KGkVWRU5UX1RFUk1JTkFURV9DT05ORUNUSU9O",
            "EAISGQoVRVZFTlRfTEFURU5DWV9TQU1QTEVTEAMSGQoVRVZFTlRfTE9DQVRJ",
            "T05fVVBEQVRFEAQSFgoSRVZFTlRfQ1VTVE9NX0VWRU5UEAUinwYKD1NlcnZl",
            "ckVkZ2VFdmVudBJNCgpldmVudF90eXBlGAEgASgOMjkuZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLlNlcnZlckVkZ2VFdmVudC5TZXJ2ZXJFdmVudFR5cGUS",
            "PwoOY2xvdWRsZXRfc3RhdGUYAiABKA4yJy5kaXN0cmlidXRlZF9tYXRjaF9l",
            "bmdpbmUuQ2xvdWRsZXRTdGF0ZRJFChFtYWludGVuYW5jZV9zdGF0ZRgDIAEo",
            "DjIqLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5NYWludGVuYW5jZVN0YXRl",
            "EjsKDGhlYWx0aF9jaGVjaxgEIAEoDjIlLmRpc3RyaWJ1dGVkX21hdGNoX2Vu",
            "Z2luZS5IZWFsdGhDaGVjaxI4CgpzdGF0aXN0aWNzGAUgASgLMiQuZGlzdHJp",
            "YnV0ZWRfbWF0Y2hfZW5naW5lLlN0YXRpc3RpY3MSQQoMbmV3X2Nsb3VkbGV0",
            "GAYgASgLMisuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkZpbmRDbG91ZGxl",
            "dFJlcGx5EhEKCWVycm9yX21zZxgHIAEoCRJBCgR0YWdzGGQgAygLMjMuZGlz",
            "dHJpYnV0ZWRfbWF0Y2hfZW5naW5lLlNlcnZlckVkZ2VFdmVudC5UYWdzRW50",
            "cnkaKwoJVGFnc0VudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToC",
            "OAEi9wEKD1NlcnZlckV2ZW50VHlwZRIRCg1FVkVOVF9VTktOT1dOEAASGQoV",
            "RVZFTlRfSU5JVF9DT05ORUNUSU9OEAESGQoVRVZFTlRfTEFURU5DWV9SRVFV",
            "RVNUEAISGwoXRVZFTlRfTEFURU5DWV9QUk9DRVNTRUQQAxIYChRFVkVOVF9D",
            "TE9VRExFVF9TVEFURRAEEh4KGkVWRU5UX0NMT1VETEVUX01BSU5URU5BTkNF",
            "EAUSGAoURVZFTlRfQVBQSU5TVF9IRUFMVEgQBhIZChVFVkVOVF9DTE9VRExF",
            "VF9VUERBVEUQBxIPCgtFVkVOVF9FUlJPUhAIKj0KB0lEVHlwZXMSEAoMSURf",
            "VU5ERUZJTkVEEAASCAoESU1FSRABEgoKBk1TSVNEThACEgoKBklQQUREUhAD",
            "KjwKC1JlcGx5U3RhdHVzEhAKDFJTX1VOREVGSU5FRBAAEg4KClJTX1NVQ0NF",
            "U1MQARILCgdSU19GQUlMEAIqjgEKEVFvc1Nlc3Npb25Qcm9maWxlEhMKD1FP",
            "U19OT19QUklPUklUWRAAEhMKD1FPU19MT1dfTEFURU5DWRABEhkKFVFPU19U",
            "SFJPVUdIUFVUX0RPV05fUxACEhkKFVFPU19USFJPVUdIUFVUX0RPV05fTRAD",
            "EhkKFVFPU19USFJPVUdIUFVUX0RPV05fTBAEKi8KElFvc1Nlc3Npb25Qcm90",
            "b2NvbBIHCgNUQ1AQABIHCgNVRFAQARIHCgNBTlkQAjK0DwoOTWF0Y2hFbmdp",
            "bmVBcGkSjwEKDlJlZ2lzdGVyQ2xpZW50Ei8uZGlzdHJpYnV0ZWRfbWF0Y2hf",
            "ZW5naW5lLlJlZ2lzdGVyQ2xpZW50UmVxdWVzdBotLmRpc3RyaWJ1dGVkX21h",
            "dGNoX2VuZ2luZS5SZWdpc3RlckNsaWVudFJlcGx5Ih2C0+STAhciEi92MS9y",
            "ZWdpc3RlcmNsaWVudDoBKhKHAQoMRmluZENsb3VkbGV0Ei0uZGlzdHJpYnV0",
            "ZWRfbWF0Y2hfZW5naW5lLkZpbmRDbG91ZGxldFJlcXVlc3QaKy5kaXN0cmli",
            "dXRlZF9tYXRjaF9lbmdpbmUuRmluZENsb3VkbGV0UmVwbHkiG4LT5JMCFSIQ",
            "L3YxL2ZpbmRjbG91ZGxldDoBKhKfAQoUUGxhdGZvcm1GaW5kQ2xvdWRsZXQS",
            "NS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuUGxhdGZvcm1GaW5kQ2xvdWRs",
            "ZXRSZXF1ZXN0GisuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkZpbmRDbG91",
            "ZGxldFJlcGx5IiOC0+STAh0iGC92MS9wbGF0Zm9ybWZpbmRjbG91ZGxldDoB",
            "KhKxAQoYUW9zUHJpb3JpdHlTZXNzaW9uQ3JlYXRlEjkuZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLlFvc1ByaW9yaXR5U2Vzc2lvbkNyZWF0ZVJlcXVlc3Qa",
            "MS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuUW9zUHJpb3JpdHlTZXNzaW9u",
            "UmVwbHkiJ4LT5JMCISIcL3YxL3Fvc3ByaW9yaXR5c2Vzc2lvbmNyZWF0ZToB",
            "KhK3AQoYUW9zUHJpb3JpdHlTZXNzaW9uRGVsZXRlEjkuZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLlFvc1ByaW9yaXR5U2Vzc2lvbkRlbGV0ZVJlcXVlc3Qa",
            "Ny5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuUW9zUHJpb3JpdHlTZXNzaW9u",
            "RGVsZXRlUmVwbHkiJ4LT5JMCISIcL3YxL3Fvc3ByaW9yaXR5c2Vzc2lvbmRl",
            "bGV0ZToBKhKPAQoOVmVyaWZ5TG9jYXRpb24SLy5kaXN0cmlidXRlZF9tYXRj",
            "aF9lbmdpbmUuVmVyaWZ5TG9jYXRpb25SZXF1ZXN0Gi0uZGlzdHJpYnV0ZWRf",
            "bWF0Y2hfZW5naW5lLlZlcmlmeUxvY2F0aW9uUmVwbHkiHYLT5JMCFyISL3Yx",
            "L3ZlcmlmeWxvY2F0aW9uOgEqEoMBCgtHZXRMb2NhdGlvbhIsLmRpc3RyaWJ1",
            "dGVkX21hdGNoX2VuZ2luZS5HZXRMb2NhdGlvblJlcXVlc3QaKi5kaXN0cmli",
            "dXRlZF9tYXRjaF9lbmdpbmUuR2V0TG9jYXRpb25SZXBseSIagtPkkwIUIg8v",
            "djEvZ2V0bG9jYXRpb246ASoSkQEKDkFkZFVzZXJUb0dyb3VwEjAuZGlzdHJp",
            "YnV0ZWRfbWF0Y2hfZW5naW5lLkR5bmFtaWNMb2NHcm91cFJlcXVlc3QaLi5k",
            "aXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuRHluYW1pY0xvY0dyb3VwUmVwbHki",
            "HYLT5JMCFyISL3YxL2FkZHVzZXJ0b2dyb3VwOgEqEokBCg5HZXRBcHBJbnN0",
            "TGlzdBIsLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBJbnN0TGlzdFJl",
            "cXVlc3QaKi5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuQXBwSW5zdExpc3RS",
            "ZXBseSIdgtPkkwIXIhIvdjEvZ2V0YXBwaW5zdGxpc3Q6ASoSfQoLR2V0RnFk",
            "bkxpc3QSKS5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuRnFkbkxpc3RSZXF1",
            "ZXN0GicuZGlzdHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkZxZG5MaXN0UmVwbHki",
            "GoLT5JMCFCIPL3YxL2dldGZxZG5saXN0OgEqEpkBChJHZXRBcHBPZmZpY2lh",
            "bEZxZG4SMC5kaXN0cmlidXRlZF9tYXRjaF9lbmdpbmUuQXBwT2ZmaWNpYWxG",
            "cWRuUmVxdWVzdBouLmRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZS5BcHBPZmZp",
            "Y2lhbEZxZG5SZXBseSIhgtPkkwIbIhYvdjEvZ2V0YXBwb2ZmaWNpYWxmcWRu",
            "OgEqEpQBChFHZXRRb3NQb3NpdGlvbktwaRIsLmRpc3RyaWJ1dGVkX21hdGNo",
            "X2VuZ2luZS5Rb3NQb3NpdGlvblJlcXVlc3QaLS5kaXN0cmlidXRlZF9tYXRj",
            "aF9lbmdpbmUuUW9zUG9zaXRpb25LcGlSZXBseSIggtPkkwIaIhUvdjEvZ2V0",
            "cW9zcG9zaXRpb25rcGk6ASowARKLAQoPU3RyZWFtRWRnZUV2ZW50EikuZGlz",
            "dHJpYnV0ZWRfbWF0Y2hfZW5naW5lLkNsaWVudEVkZ2VFdmVudBopLmRpc3Ry",
            "aWJ1dGVkX21hdGNoX2VuZ2luZS5TZXJ2ZXJFZGdlRXZlbnQiHoLT5JMCGCIT",
            "L3YxL3N0cmVhbWVkZ2VldmVudDoBKigBMAFiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Google.Api.AnnotationsReflection.Descriptor, global::DistributedMatchEngine.LocReflection.Descriptor, global::DistributedMatchEngine.AppcommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DistributedMatchEngine.IDTypes), typeof(global::DistributedMatchEngine.ReplyStatus), typeof(global::DistributedMatchEngine.QosSessionProfile), typeof(global::DistributedMatchEngine.QosSessionProtocol), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.RegisterClientRequest), global::DistributedMatchEngine.RegisterClientRequest.Parser, new[]{ "Ver", "OrgName", "AppName", "AppVers", "CarrierName", "AuthToken", "UniqueIdType", "UniqueId", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.RegisterClientReply), global::DistributedMatchEngine.RegisterClientReply.Parser, new[]{ "Ver", "Status", "SessionCookie", "TokenServerUri", "UniqueIdType", "UniqueId", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.FindCloudletRequest), global::DistributedMatchEngine.FindCloudletRequest.Parser, new[]{ "Ver", "SessionCookie", "CarrierName", "GpsLocation", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.PlatformFindCloudletRequest), global::DistributedMatchEngine.PlatformFindCloudletRequest.Parser, new[]{ "Ver", "SessionCookie", "CarrierName", "ClientToken", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.FindCloudletReply), global::DistributedMatchEngine.FindCloudletReply.Parser, new[]{ "Ver", "Status", "Fqdn", "Ports", "CloudletLocation", "EdgeEventsCookie", "QosResult", "QosErrorMsg", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.FindCloudletReply.Types.FindStatus), typeof(global::DistributedMatchEngine.FindCloudletReply.Types.QosSessionResult) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPrioritySessionCreateRequest), global::DistributedMatchEngine.QosPrioritySessionCreateRequest.Parser, new[]{ "Ver", "SessionCookie", "SessionDuration", "IpUserEquipment", "IpApplicationServer", "PortUserEquipment", "PortApplicationServer", "ProtocolIn", "ProtocolOut", "Profile", "NotificationUri", "NotificationAuthToken", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPrioritySessionReply), global::DistributedMatchEngine.QosPrioritySessionReply.Parser, new[]{ "Ver", "SessionDuration", "Profile", "SessionId", "StartedAt", "ExpiresAt", "HttpStatus", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPrioritySessionDeleteRequest), global::DistributedMatchEngine.QosPrioritySessionDeleteRequest.Parser, new[]{ "Ver", "SessionCookie", "Profile", "SessionId", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPrioritySessionDeleteReply), global::DistributedMatchEngine.QosPrioritySessionDeleteReply.Parser, new[]{ "Ver", "Status", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.QosPrioritySessionDeleteReply.Types.DeleteStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.VerifyLocationRequest), global::DistributedMatchEngine.VerifyLocationRequest.Parser, new[]{ "Ver", "SessionCookie", "CarrierName", "GpsLocation", "VerifyLocToken", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.VerifyLocationReply), global::DistributedMatchEngine.VerifyLocationReply.Parser, new[]{ "Ver", "TowerStatus", "GpsLocationStatus", "GpsLocationAccuracyKm", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.VerifyLocationReply.Types.TowerStatus), typeof(global::DistributedMatchEngine.VerifyLocationReply.Types.GPSLocationStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.GetLocationRequest), global::DistributedMatchEngine.GetLocationRequest.Parser, new[]{ "Ver", "SessionCookie", "CarrierName", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.GetLocationReply), global::DistributedMatchEngine.GetLocationReply.Parser, new[]{ "Ver", "Status", "CarrierName", "Tower", "NetworkLocation", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.GetLocationReply.Types.LocStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppInstListRequest), global::DistributedMatchEngine.AppInstListRequest.Parser, new[]{ "Ver", "SessionCookie", "CarrierName", "GpsLocation", "Limit", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.Appinstance), global::DistributedMatchEngine.Appinstance.Parser, new[]{ "AppName", "AppVers", "Fqdn", "Ports", "OrgName", "EdgeEventsCookie" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.CloudletLocation), global::DistributedMatchEngine.CloudletLocation.Parser, new[]{ "CarrierName", "CloudletName", "GpsLocation", "Distance", "Appinstances" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppInstListReply), global::DistributedMatchEngine.AppInstListReply.Parser, new[]{ "Ver", "Status", "Cloudlets", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.AppInstListReply.Types.AIStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.FqdnListRequest), global::DistributedMatchEngine.FqdnListRequest.Parser, new[]{ "Ver", "SessionCookie", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppFqdn), global::DistributedMatchEngine.AppFqdn.Parser, new[]{ "AppName", "AppVers", "OrgName", "Fqdns", "AndroidPackageName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.FqdnListReply), global::DistributedMatchEngine.FqdnListReply.Parser, new[]{ "Ver", "AppFqdns", "Status", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.FqdnListReply.Types.FLStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppOfficialFqdnRequest), global::DistributedMatchEngine.AppOfficialFqdnRequest.Parser, new[]{ "Ver", "SessionCookie", "GpsLocation", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppOfficialFqdnReply), global::DistributedMatchEngine.AppOfficialFqdnReply.Parser, new[]{ "Ver", "AppOfficialFqdn", "ClientToken", "Status", "Ports", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.AppOfficialFqdnReply.Types.AOFStatus) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.DynamicLocGroupRequest), global::DistributedMatchEngine.DynamicLocGroupRequest.Parser, new[]{ "Ver", "SessionCookie", "LgId", "CommType", "UserData", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.DynamicLocGroupRequest.Types.DlgCommType) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.DynamicLocGroupReply), global::DistributedMatchEngine.DynamicLocGroupReply.Parser, new[]{ "Ver", "Status", "ErrorCode", "GroupCookie", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPosition), global::DistributedMatchEngine.QosPosition.Parser, new[]{ "Positionid", "GpsLocation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.BandSelection), global::DistributedMatchEngine.BandSelection.Parser, new[]{ "Rat2G", "Rat3G", "Rat4G", "Rat5G" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPositionRequest), global::DistributedMatchEngine.QosPositionRequest.Parser, new[]{ "Ver", "SessionCookie", "Positions", "LteCategory", "BandSelection", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPositionKpiResult), global::DistributedMatchEngine.QosPositionKpiResult.Parser, new[]{ "Positionid", "GpsLocation", "DluserthroughputMin", "DluserthroughputAvg", "DluserthroughputMax", "UluserthroughputMin", "UluserthroughputAvg", "UluserthroughputMax", "LatencyMin", "LatencyAvg", "LatencyMax" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.QosPositionKpiReply), global::DistributedMatchEngine.QosPositionKpiReply.Parser, new[]{ "Ver", "Status", "PositionResults", "Tags" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.ClientEdgeEvent), global::DistributedMatchEngine.ClientEdgeEvent.Parser, new[]{ "SessionCookie", "EdgeEventsCookie", "EventType", "GpsLocation", "Samples", "DeviceInfoStatic", "DeviceInfoDynamic", "CustomEvent", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.ClientEdgeEvent.Types.ClientEventType) }, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.ServerEdgeEvent), global::DistributedMatchEngine.ServerEdgeEvent.Parser, new[]{ "EventType", "CloudletState", "MaintenanceState", "HealthCheck", "Statistics", "NewCloudlet", "ErrorMsg", "Tags" }, null, new[]{ typeof(global::DistributedMatchEngine.ServerEdgeEvent.Types.ServerEventType) }, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Enums
  public enum IDTypes {
    [pbr::OriginalName("ID_UNDEFINED")] IdUndefined = 0,
    [pbr::OriginalName("IMEI")] Imei = 1,
    [pbr::OriginalName("MSISDN")] Msisdn = 2,
    [pbr::OriginalName("IPADDR")] Ipaddr = 3,
  }

  public enum ReplyStatus {
    [pbr::OriginalName("RS_UNDEFINED")] RsUndefined = 0,
    [pbr::OriginalName("RS_SUCCESS")] RsSuccess = 1,
    [pbr::OriginalName("RS_FAIL")] RsFail = 2,
  }

  public enum QosSessionProfile {
    /// <summary>
    /// Specifies that no priority session should be created
    /// </summary>
    [pbr::OriginalName("QOS_NO_PRIORITY")] QosNoPriority = 0,
    /// <summary>
    /// Corresponds to a specific set of network parameters for low latency that will be 
    /// negotiated with the network provider in advance
    /// </summary>
    [pbr::OriginalName("QOS_LOW_LATENCY")] QosLowLatency = 1,
    /// <summary>
    /// Downlink traffic from AppInst to client is prioritized up to 20Mbps
    /// </summary>
    [pbr::OriginalName("QOS_THROUGHPUT_DOWN_S")] QosThroughputDownS = 2,
    /// <summary>
    /// Downlink traffic from AppInst to client is prioritized up to 50Mbps
    /// </summary>
    [pbr::OriginalName("QOS_THROUGHPUT_DOWN_M")] QosThroughputDownM = 3,
    /// <summary>
    /// Downlink traffic from AppInst to client is prioritized up to 100Mbps
    /// </summary>
    [pbr::OriginalName("QOS_THROUGHPUT_DOWN_L")] QosThroughputDownL = 4,
  }

  public enum QosSessionProtocol {
    [pbr::OriginalName("TCP")] Tcp = 0,
    [pbr::OriginalName("UDP")] Udp = 1,
    [pbr::OriginalName("ANY")] Any = 2,
  }

  #endregion

  #region Messages
  public sealed partial class RegisterClientRequest : pb::IMessage<RegisterClientRequest> {
    private static readonly pb::MessageParser<RegisterClientRequest> _parser = new pb::MessageParser<RegisterClientRequest>(() => new RegisterClientRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterClientRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientRequest(RegisterClientRequest other) : this() {
      ver_ = other.ver_;
      orgName_ = other.orgName_;
      appName_ = other.appName_;
      appVers_ = other.appVers_;
      carrierName_ = other.carrierName_;
      authToken_ = other.authToken_;
      uniqueIdType_ = other.uniqueIdType_;
      uniqueId_ = other.uniqueId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientRequest Clone() {
      return new RegisterClientRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "org_name" field.</summary>
    public const int OrgNameFieldNumber = 2;
    private string orgName_ = "";
    /// <summary>
    ///
    /// App Organization Name
    ///
    /// App developer organization name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrgName {
      get { return orgName_; }
      set {
        orgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 3;
    private string appName_ = "";
    /// <summary>
    ///
    /// App Name
    ///
    /// Name of your application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_vers" field.</summary>
    public const int AppVersFieldNumber = 4;
    private string appVers_ = "";
    /// <summary>
    ///
    /// App Version
    ///
    /// Application version.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVers {
      get { return appVers_; }
      set {
        appVers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 5;
    private string carrierName_ = "";
    /// <summary>
    ///
    /// Carrier Name
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "auth_token" field.</summary>
    public const int AuthTokenFieldNumber = 6;
    private string authToken_ = "";
    /// <summary>
    ///
    /// Authentication Token
    ///
    /// _(optional)_ An authentication token supplied by the application.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AuthToken {
      get { return authToken_; }
      set {
        authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_id_type" field.</summary>
    public const int UniqueIdTypeFieldNumber = 8;
    private string uniqueIdType_ = "";
    /// <summary>
    ///
    /// Unique ID Type
    ///
    /// _(optional)_ Type of unique ID provided by the client.
    /// If left blank, a new Unique ID type will be assigned in the RegisterClient Reply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueIdType {
      get { return uniqueIdType_; }
      set {
        uniqueIdType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 9;
    private string uniqueId_ = "";
    /// <summary>
    ///
    /// Unique ID
    ///
    /// _(optional)_ Unique identification of the client device or user. May be overridden by the server.
    /// If left blank, a new Unique ID will be assigned in the RegisterClient Reply.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// Tags
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterClientRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterClientRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (OrgName != other.OrgName) return false;
      if (AppName != other.AppName) return false;
      if (AppVers != other.AppVers) return false;
      if (CarrierName != other.CarrierName) return false;
      if (AuthToken != other.AuthToken) return false;
      if (UniqueIdType != other.UniqueIdType) return false;
      if (UniqueId != other.UniqueId) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (OrgName.Length != 0) hash ^= OrgName.GetHashCode();
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (AppVers.Length != 0) hash ^= AppVers.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (AuthToken.Length != 0) hash ^= AuthToken.GetHashCode();
      if (UniqueIdType.Length != 0) hash ^= UniqueIdType.GetHashCode();
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (OrgName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(OrgName);
      }
      if (AppName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AppName);
      }
      if (AppVers.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(AppVers);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(CarrierName);
      }
      if (AuthToken.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AuthToken);
      }
      if (UniqueIdType.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(UniqueIdType);
      }
      if (UniqueId.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(UniqueId);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (OrgName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrgName);
      }
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (AppVers.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVers);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (AuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
      }
      if (UniqueIdType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueIdType);
      }
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterClientRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.OrgName.Length != 0) {
        OrgName = other.OrgName;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.AppVers.Length != 0) {
        AppVers = other.AppVers;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.AuthToken.Length != 0) {
        AuthToken = other.AuthToken;
      }
      if (other.UniqueIdType.Length != 0) {
        UniqueIdType = other.UniqueIdType;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            OrgName = input.ReadString();
            break;
          }
          case 26: {
            AppName = input.ReadString();
            break;
          }
          case 34: {
            AppVers = input.ReadString();
            break;
          }
          case 42: {
            CarrierName = input.ReadString();
            break;
          }
          case 50: {
            AuthToken = input.ReadString();
            break;
          }
          case 66: {
            UniqueIdType = input.ReadString();
            break;
          }
          case 74: {
            UniqueId = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RegisterClientReply : pb::IMessage<RegisterClientReply> {
    private static readonly pb::MessageParser<RegisterClientReply> _parser = new pb::MessageParser<RegisterClientReply>(() => new RegisterClientReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RegisterClientReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientReply(RegisterClientReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      sessionCookie_ = other.sessionCookie_;
      tokenServerUri_ = other.tokenServerUri_;
      uniqueIdType_ = other.uniqueIdType_;
      uniqueId_ = other.uniqueId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RegisterClientReply Clone() {
      return new RegisterClientReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.ReplyStatus status_ = 0;
    /// <summary>
    /// Status of the reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.ReplyStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 3;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie to be used in later API calls
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "token_server_uri" field.</summary>
    public const int TokenServerUriFieldNumber = 4;
    private string tokenServerUri_ = "";
    /// <summary>
    /// URI for the Token Server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TokenServerUri {
      get { return tokenServerUri_; }
      set {
        tokenServerUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_id_type" field.</summary>
    public const int UniqueIdTypeFieldNumber = 5;
    private string uniqueIdType_ = "";
    /// <summary>
    ///
    /// Unique ID Type
    ///
    /// _(optional)_ Type of unique ID provided by the server
    /// A unique_id_type and unique_id may be provided by the client to be registered.
    /// During registering, if a unique_id_type and unique_id are provided by the client in their request,
    /// the unique_id_type and unique_id will be left blank in the response.
    /// But, if the client does not provide a unique_id_type and unique_id, then the server generates
    /// one and provides the unique_id in the response. If possible, the unique_id should be saved by the
    /// client locally and used for subsequent RegisterClient API calls. Otherwise, a new unique_id will be
    /// generated for further API calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueIdType {
      get { return uniqueIdType_; }
      set {
        uniqueIdType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unique_id" field.</summary>
    public const int UniqueIdFieldNumber = 6;
    private string uniqueId_ = "";
    /// <summary>
    ///
    /// Unique ID
    ///
    /// _(optional)_ Unique identification of the client device or user
    /// A unique_id_type and unique_id may be provided by the client to be registered.
    /// During registering, if a unique_id_type and unique_id are provided by the client in their request,
    /// the unique_id_type and unique_id will be left blank in the response.
    /// But, if the client does not provide a unique_id_type and unique_id, then the server generates
    /// one and provides the unique_id in the response. If possible, the unique_id should be saved by the
    /// client locally and used for subsequent RegisterClient API calls. Otherwise, a new unique_id will be
    /// generated for further API calls.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UniqueId {
      get { return uniqueId_; }
      set {
        uniqueId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// Vendor specific data
    ///
    /// _(optional)_ Array of Tags.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RegisterClientReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RegisterClientReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (TokenServerUri != other.TokenServerUri) return false;
      if (UniqueIdType != other.UniqueIdType) return false;
      if (UniqueId != other.UniqueId) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (TokenServerUri.Length != 0) hash ^= TokenServerUri.GetHashCode();
      if (UniqueIdType.Length != 0) hash ^= UniqueIdType.GetHashCode();
      if (UniqueId.Length != 0) hash ^= UniqueId.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SessionCookie);
      }
      if (TokenServerUri.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(TokenServerUri);
      }
      if (UniqueIdType.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UniqueIdType);
      }
      if (UniqueId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(UniqueId);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (TokenServerUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TokenServerUri);
      }
      if (UniqueIdType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueIdType);
      }
      if (UniqueId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UniqueId);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RegisterClientReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.TokenServerUri.Length != 0) {
        TokenServerUri = other.TokenServerUri;
      }
      if (other.UniqueIdType.Length != 0) {
        UniqueIdType = other.UniqueIdType;
      }
      if (other.UniqueId.Length != 0) {
        UniqueId = other.UniqueId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.ReplyStatus) input.ReadEnum();
            break;
          }
          case 26: {
            SessionCookie = input.ReadString();
            break;
          }
          case 34: {
            TokenServerUri = input.ReadString();
            break;
          }
          case 42: {
            UniqueIdType = input.ReadString();
            break;
          }
          case 50: {
            UniqueId = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindCloudletRequest : pb::IMessage<FindCloudletRequest> {
    private static readonly pb::MessageParser<FindCloudletRequest> _parser = new pb::MessageParser<FindCloudletRequest>(() => new FindCloudletRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindCloudletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletRequest(FindCloudletRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      carrierName_ = other.carrierName_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletRequest Clone() {
      return new FindCloudletRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    ///
    /// Session Cookie
    ///
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    ///
    /// Carrier Name
    ///
    /// _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
    /// If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 4;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    ///
    /// GPS Location
    ///
    /// The GPS location of the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// Tags
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindCloudletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindCloudletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (CarrierName != other.CarrierName) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GpsLocation);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindCloudletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 34: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlatformFindCloudletRequest : pb::IMessage<PlatformFindCloudletRequest> {
    private static readonly pb::MessageParser<PlatformFindCloudletRequest> _parser = new pb::MessageParser<PlatformFindCloudletRequest>(() => new PlatformFindCloudletRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlatformFindCloudletRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformFindCloudletRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformFindCloudletRequest(PlatformFindCloudletRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      carrierName_ = other.carrierName_;
      clientToken_ = other.clientToken_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlatformFindCloudletRequest Clone() {
      return new PlatformFindCloudletRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    ///
    /// Session Cookie
    ///
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    ///
    /// Carrier Name
    ///
    /// _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
    /// If you wish to search for any app instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 4;
    private string clientToken_ = "";
    /// <summary>
    ///
    /// Client Token
    ///
    /// Token with encoded client data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// Tags
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlatformFindCloudletRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlatformFindCloudletRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (CarrierName != other.CarrierName) return false;
      if (ClientToken != other.ClientToken) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      if (ClientToken.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClientToken);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlatformFindCloudletRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 34: {
            ClientToken = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class FindCloudletReply : pb::IMessage<FindCloudletReply> {
    private static readonly pb::MessageParser<FindCloudletReply> _parser = new pb::MessageParser<FindCloudletReply>(() => new FindCloudletReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FindCloudletReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletReply(FindCloudletReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      fqdn_ = other.fqdn_;
      ports_ = other.ports_.Clone();
      cloudletLocation_ = other.cloudletLocation_ != null ? other.cloudletLocation_.Clone() : null;
      edgeEventsCookie_ = other.edgeEventsCookie_;
      qosResult_ = other.qosResult_;
      qosErrorMsg_ = other.qosErrorMsg_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FindCloudletReply Clone() {
      return new FindCloudletReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.FindCloudletReply.Types.FindStatus status_ = 0;
    /// <summary>
    /// Status return
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.FindCloudletReply.Types.FindStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "fqdn" field.</summary>
    public const int FqdnFieldNumber = 3;
    private string fqdn_ = "";
    /// <summary>
    /// Fully Qualified Domain Name of the Closest App instance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fqdn {
      get { return fqdn_; }
      set {
        fqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.AppPort> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(34, global::DistributedMatchEngine.AppPort.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.AppPort> ports_ = new pbc::RepeatedField<global::DistributedMatchEngine.AppPort>();
    /// <summary>
    /// List of Service Endpoints for AppInst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.AppPort> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "cloudlet_location" field.</summary>
    public const int CloudletLocationFieldNumber = 5;
    private global::DistributedMatchEngine.Loc cloudletLocation_;
    /// <summary>
    /// Location of the cloudlet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc CloudletLocation {
      get { return cloudletLocation_; }
      set {
        cloudletLocation_ = value;
      }
    }

    /// <summary>Field number for the "edge_events_cookie" field.</summary>
    public const int EdgeEventsCookieFieldNumber = 6;
    private string edgeEventsCookie_ = "";
    /// <summary>
    /// Session Cookie for specific EdgeEvents for specific AppInst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EdgeEventsCookie {
      get { return edgeEventsCookie_; }
      set {
        edgeEventsCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "qos_result" field.</summary>
    public const int QosResultFieldNumber = 7;
    private global::DistributedMatchEngine.FindCloudletReply.Types.QosSessionResult qosResult_ = 0;
    /// <summary>
    /// Result of QOS priority session creation attempt
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.FindCloudletReply.Types.QosSessionResult QosResult {
      get { return qosResult_; }
      set {
        qosResult_ = value;
      }
    }

    /// <summary>Field number for the "qos_error_msg" field.</summary>
    public const int QosErrorMsgFieldNumber = 8;
    private string qosErrorMsg_ = "";
    /// <summary>
    /// Error message in case of QOS_SESSION_FAILED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string QosErrorMsg {
      get { return qosErrorMsg_; }
      set {
        qosErrorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FindCloudletReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FindCloudletReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if (Fqdn != other.Fqdn) return false;
      if(!ports_.Equals(other.ports_)) return false;
      if (!object.Equals(CloudletLocation, other.CloudletLocation)) return false;
      if (EdgeEventsCookie != other.EdgeEventsCookie) return false;
      if (QosResult != other.QosResult) return false;
      if (QosErrorMsg != other.QosErrorMsg) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (Fqdn.Length != 0) hash ^= Fqdn.GetHashCode();
      hash ^= ports_.GetHashCode();
      if (cloudletLocation_ != null) hash ^= CloudletLocation.GetHashCode();
      if (EdgeEventsCookie.Length != 0) hash ^= EdgeEventsCookie.GetHashCode();
      if (QosResult != 0) hash ^= QosResult.GetHashCode();
      if (QosErrorMsg.Length != 0) hash ^= QosErrorMsg.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (Fqdn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fqdn);
      }
      ports_.WriteTo(output, _repeated_ports_codec);
      if (cloudletLocation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(CloudletLocation);
      }
      if (EdgeEventsCookie.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EdgeEventsCookie);
      }
      if (QosResult != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) QosResult);
      }
      if (QosErrorMsg.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(QosErrorMsg);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (Fqdn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fqdn);
      }
      size += ports_.CalculateSize(_repeated_ports_codec);
      if (cloudletLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CloudletLocation);
      }
      if (EdgeEventsCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EdgeEventsCookie);
      }
      if (QosResult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) QosResult);
      }
      if (QosErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(QosErrorMsg);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FindCloudletReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.Fqdn.Length != 0) {
        Fqdn = other.Fqdn;
      }
      ports_.Add(other.ports_);
      if (other.cloudletLocation_ != null) {
        if (cloudletLocation_ == null) {
          CloudletLocation = new global::DistributedMatchEngine.Loc();
        }
        CloudletLocation.MergeFrom(other.CloudletLocation);
      }
      if (other.EdgeEventsCookie.Length != 0) {
        EdgeEventsCookie = other.EdgeEventsCookie;
      }
      if (other.QosResult != 0) {
        QosResult = other.QosResult;
      }
      if (other.QosErrorMsg.Length != 0) {
        QosErrorMsg = other.QosErrorMsg;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.FindCloudletReply.Types.FindStatus) input.ReadEnum();
            break;
          }
          case 26: {
            Fqdn = input.ReadString();
            break;
          }
          case 34: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
          case 42: {
            if (cloudletLocation_ == null) {
              CloudletLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(CloudletLocation);
            break;
          }
          case 50: {
            EdgeEventsCookie = input.ReadString();
            break;
          }
          case 56: {
            QosResult = (global::DistributedMatchEngine.FindCloudletReply.Types.QosSessionResult) input.ReadEnum();
            break;
          }
          case 66: {
            QosErrorMsg = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FindCloudletReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum FindStatus {
        [pbr::OriginalName("FIND_UNKNOWN")] FindUnknown = 0,
        [pbr::OriginalName("FIND_FOUND")] FindFound = 1,
        [pbr::OriginalName("FIND_NOTFOUND")] FindNotfound = 2,
      }

      public enum QosSessionResult {
        [pbr::OriginalName("QOS_NOT_ATTEMPTED")] QosNotAttempted = 0,
        [pbr::OriginalName("QOS_SESSION_CREATED")] QosSessionCreated = 1,
        [pbr::OriginalName("QOS_SESSION_FAILED")] QosSessionFailed = 2,
      }

    }
    #endregion

  }

  public sealed partial class QosPrioritySessionCreateRequest : pb::IMessage<QosPrioritySessionCreateRequest> {
    private static readonly pb::MessageParser<QosPrioritySessionCreateRequest> _parser = new pb::MessageParser<QosPrioritySessionCreateRequest>(() => new QosPrioritySessionCreateRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPrioritySessionCreateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionCreateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionCreateRequest(QosPrioritySessionCreateRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      sessionDuration_ = other.sessionDuration_;
      ipUserEquipment_ = other.ipUserEquipment_;
      ipApplicationServer_ = other.ipApplicationServer_;
      portUserEquipment_ = other.portUserEquipment_;
      portApplicationServer_ = other.portApplicationServer_;
      protocolIn_ = other.protocolIn_;
      protocolOut_ = other.protocolOut_;
      profile_ = other.profile_;
      notificationUri_ = other.notificationUri_;
      notificationAuthToken_ = other.notificationAuthToken_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionCreateRequest Clone() {
      return new QosPrioritySessionCreateRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    ///
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "session_duration" field.</summary>
    public const int SessionDurationFieldNumber = 3;
    private uint sessionDuration_;
    /// <summary>
    ///
    /// _(optional)_ QOS Priority Session duration in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionDuration {
      get { return sessionDuration_; }
      set {
        sessionDuration_ = value;
      }
    }

    /// <summary>Field number for the "ip_user_equipment" field.</summary>
    public const int IpUserEquipmentFieldNumber = 4;
    private string ipUserEquipment_ = "";
    /// <summary>
    ///
    /// IP address of mobile device
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpUserEquipment {
      get { return ipUserEquipment_; }
      set {
        ipUserEquipment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ip_application_server" field.</summary>
    public const int IpApplicationServerFieldNumber = 5;
    private string ipApplicationServer_ = "";
    /// <summary>
    ///
    /// IP address of the application server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IpApplicationServer {
      get { return ipApplicationServer_; }
      set {
        ipApplicationServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port_user_equipment" field.</summary>
    public const int PortUserEquipmentFieldNumber = 6;
    private string portUserEquipment_ = "";
    /// <summary>
    ///
    /// _(optional)_ A list of single ports or port ranges on the user equipment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortUserEquipment {
      get { return portUserEquipment_; }
      set {
        portUserEquipment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port_application_server" field.</summary>
    public const int PortApplicationServerFieldNumber = 7;
    private string portApplicationServer_ = "";
    /// <summary>
    ///
    /// _(optional)_ A list of single ports or port ranges on the application server
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PortApplicationServer {
      get { return portApplicationServer_; }
      set {
        portApplicationServer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "protocol_in" field.</summary>
    public const int ProtocolInFieldNumber = 8;
    private global::DistributedMatchEngine.QosSessionProtocol protocolIn_ = 0;
    /// <summary>
    ///
    /// _(optional)_ The used transport protocol for the uplink
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosSessionProtocol ProtocolIn {
      get { return protocolIn_; }
      set {
        protocolIn_ = value;
      }
    }

    /// <summary>Field number for the "protocol_out" field.</summary>
    public const int ProtocolOutFieldNumber = 9;
    private global::DistributedMatchEngine.QosSessionProtocol protocolOut_ = 0;
    /// <summary>
    ///
    /// _(optional)_ The used transport protocol for the downlink
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosSessionProtocol ProtocolOut {
      get { return protocolOut_; }
      set {
        protocolOut_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 10;
    private global::DistributedMatchEngine.QosSessionProfile profile_ = 0;
    /// <summary>
    ///
    /// QOS Priority Session profile name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosSessionProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "notification_uri" field.</summary>
    public const int NotificationUriFieldNumber = 11;
    private string notificationUri_ = "";
    /// <summary>
    ///
    ///  _(optional)_ URI of the callback receiver. Allows asynchronous delivery of session related events.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotificationUri {
      get { return notificationUri_; }
      set {
        notificationUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "notification_auth_token" field.</summary>
    public const int NotificationAuthTokenFieldNumber = 12;
    private string notificationAuthToken_ = "";
    /// <summary>
    ///
    /// _(optional)_ Authentification token for callback API
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NotificationAuthToken {
      get { return notificationAuthToken_; }
      set {
        notificationAuthToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPrioritySessionCreateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPrioritySessionCreateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (SessionDuration != other.SessionDuration) return false;
      if (IpUserEquipment != other.IpUserEquipment) return false;
      if (IpApplicationServer != other.IpApplicationServer) return false;
      if (PortUserEquipment != other.PortUserEquipment) return false;
      if (PortApplicationServer != other.PortApplicationServer) return false;
      if (ProtocolIn != other.ProtocolIn) return false;
      if (ProtocolOut != other.ProtocolOut) return false;
      if (Profile != other.Profile) return false;
      if (NotificationUri != other.NotificationUri) return false;
      if (NotificationAuthToken != other.NotificationAuthToken) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (SessionDuration != 0) hash ^= SessionDuration.GetHashCode();
      if (IpUserEquipment.Length != 0) hash ^= IpUserEquipment.GetHashCode();
      if (IpApplicationServer.Length != 0) hash ^= IpApplicationServer.GetHashCode();
      if (PortUserEquipment.Length != 0) hash ^= PortUserEquipment.GetHashCode();
      if (PortApplicationServer.Length != 0) hash ^= PortApplicationServer.GetHashCode();
      if (ProtocolIn != 0) hash ^= ProtocolIn.GetHashCode();
      if (ProtocolOut != 0) hash ^= ProtocolOut.GetHashCode();
      if (Profile != 0) hash ^= Profile.GetHashCode();
      if (NotificationUri.Length != 0) hash ^= NotificationUri.GetHashCode();
      if (NotificationAuthToken.Length != 0) hash ^= NotificationAuthToken.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (SessionDuration != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(SessionDuration);
      }
      if (IpUserEquipment.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(IpUserEquipment);
      }
      if (IpApplicationServer.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IpApplicationServer);
      }
      if (PortUserEquipment.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(PortUserEquipment);
      }
      if (PortApplicationServer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PortApplicationServer);
      }
      if (ProtocolIn != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) ProtocolIn);
      }
      if (ProtocolOut != 0) {
        output.WriteRawTag(72);
        output.WriteEnum((int) ProtocolOut);
      }
      if (Profile != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Profile);
      }
      if (NotificationUri.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(NotificationUri);
      }
      if (NotificationAuthToken.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(NotificationAuthToken);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (SessionDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionDuration);
      }
      if (IpUserEquipment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpUserEquipment);
      }
      if (IpApplicationServer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IpApplicationServer);
      }
      if (PortUserEquipment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortUserEquipment);
      }
      if (PortApplicationServer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortApplicationServer);
      }
      if (ProtocolIn != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolIn);
      }
      if (ProtocolOut != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProtocolOut);
      }
      if (Profile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Profile);
      }
      if (NotificationUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotificationUri);
      }
      if (NotificationAuthToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NotificationAuthToken);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPrioritySessionCreateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.SessionDuration != 0) {
        SessionDuration = other.SessionDuration;
      }
      if (other.IpUserEquipment.Length != 0) {
        IpUserEquipment = other.IpUserEquipment;
      }
      if (other.IpApplicationServer.Length != 0) {
        IpApplicationServer = other.IpApplicationServer;
      }
      if (other.PortUserEquipment.Length != 0) {
        PortUserEquipment = other.PortUserEquipment;
      }
      if (other.PortApplicationServer.Length != 0) {
        PortApplicationServer = other.PortApplicationServer;
      }
      if (other.ProtocolIn != 0) {
        ProtocolIn = other.ProtocolIn;
      }
      if (other.ProtocolOut != 0) {
        ProtocolOut = other.ProtocolOut;
      }
      if (other.Profile != 0) {
        Profile = other.Profile;
      }
      if (other.NotificationUri.Length != 0) {
        NotificationUri = other.NotificationUri;
      }
      if (other.NotificationAuthToken.Length != 0) {
        NotificationAuthToken = other.NotificationAuthToken;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 24: {
            SessionDuration = input.ReadUInt32();
            break;
          }
          case 34: {
            IpUserEquipment = input.ReadString();
            break;
          }
          case 42: {
            IpApplicationServer = input.ReadString();
            break;
          }
          case 50: {
            PortUserEquipment = input.ReadString();
            break;
          }
          case 58: {
            PortApplicationServer = input.ReadString();
            break;
          }
          case 64: {
            ProtocolIn = (global::DistributedMatchEngine.QosSessionProtocol) input.ReadEnum();
            break;
          }
          case 72: {
            ProtocolOut = (global::DistributedMatchEngine.QosSessionProtocol) input.ReadEnum();
            break;
          }
          case 80: {
            Profile = (global::DistributedMatchEngine.QosSessionProfile) input.ReadEnum();
            break;
          }
          case 90: {
            NotificationUri = input.ReadString();
            break;
          }
          case 98: {
            NotificationAuthToken = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPrioritySessionReply : pb::IMessage<QosPrioritySessionReply> {
    private static readonly pb::MessageParser<QosPrioritySessionReply> _parser = new pb::MessageParser<QosPrioritySessionReply>(() => new QosPrioritySessionReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPrioritySessionReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionReply(QosPrioritySessionReply other) : this() {
      ver_ = other.ver_;
      sessionDuration_ = other.sessionDuration_;
      profile_ = other.profile_;
      sessionId_ = other.sessionId_;
      startedAt_ = other.startedAt_;
      expiresAt_ = other.expiresAt_;
      httpStatus_ = other.httpStatus_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionReply Clone() {
      return new QosPrioritySessionReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_duration" field.</summary>
    public const int SessionDurationFieldNumber = 2;
    private uint sessionDuration_;
    /// <summary>
    ///
    /// QOS Priority Session duration in seconds
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SessionDuration {
      get { return sessionDuration_; }
      set {
        sessionDuration_ = value;
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 3;
    private global::DistributedMatchEngine.QosSessionProfile profile_ = 0;
    /// <summary>
    ///
    /// QOS Priority Session profile name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosSessionProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 4;
    private string sessionId_ = "";
    /// <summary>
    ///
    /// Session ID in UUID format
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "started_at" field.</summary>
    public const int StartedAtFieldNumber = 5;
    private uint startedAt_;
    /// <summary>
    ///
    /// Timestamp of session start in seconds since unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StartedAt {
      get { return startedAt_; }
      set {
        startedAt_ = value;
      }
    }

    /// <summary>Field number for the "expires_at" field.</summary>
    public const int ExpiresAtFieldNumber = 6;
    private uint expiresAt_;
    /// <summary>
    ///
    /// Timestamp of session expiration if the session was not deleted in seconds since unix epoch
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ExpiresAt {
      get { return expiresAt_; }
      set {
        expiresAt_ = value;
      }
    }

    /// <summary>Field number for the "http_status" field.</summary>
    public const int HttpStatusFieldNumber = 7;
    private uint httpStatus_;
    /// <summary>
    ///
    /// HTTP Status Code of call to operator's API server.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint HttpStatus {
      get { return httpStatus_; }
      set {
        httpStatus_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPrioritySessionReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPrioritySessionReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionDuration != other.SessionDuration) return false;
      if (Profile != other.Profile) return false;
      if (SessionId != other.SessionId) return false;
      if (StartedAt != other.StartedAt) return false;
      if (ExpiresAt != other.ExpiresAt) return false;
      if (HttpStatus != other.HttpStatus) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionDuration != 0) hash ^= SessionDuration.GetHashCode();
      if (Profile != 0) hash ^= Profile.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      if (StartedAt != 0) hash ^= StartedAt.GetHashCode();
      if (ExpiresAt != 0) hash ^= ExpiresAt.GetHashCode();
      if (HttpStatus != 0) hash ^= HttpStatus.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionDuration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(SessionDuration);
      }
      if (Profile != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Profile);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SessionId);
      }
      if (StartedAt != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(StartedAt);
      }
      if (ExpiresAt != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(ExpiresAt);
      }
      if (HttpStatus != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(HttpStatus);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SessionDuration);
      }
      if (Profile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Profile);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      if (StartedAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StartedAt);
      }
      if (ExpiresAt != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ExpiresAt);
      }
      if (HttpStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(HttpStatus);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPrioritySessionReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionDuration != 0) {
        SessionDuration = other.SessionDuration;
      }
      if (other.Profile != 0) {
        Profile = other.Profile;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      if (other.StartedAt != 0) {
        StartedAt = other.StartedAt;
      }
      if (other.ExpiresAt != 0) {
        ExpiresAt = other.ExpiresAt;
      }
      if (other.HttpStatus != 0) {
        HttpStatus = other.HttpStatus;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            SessionDuration = input.ReadUInt32();
            break;
          }
          case 24: {
            Profile = (global::DistributedMatchEngine.QosSessionProfile) input.ReadEnum();
            break;
          }
          case 34: {
            SessionId = input.ReadString();
            break;
          }
          case 40: {
            StartedAt = input.ReadUInt32();
            break;
          }
          case 48: {
            ExpiresAt = input.ReadUInt32();
            break;
          }
          case 56: {
            HttpStatus = input.ReadUInt32();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPrioritySessionDeleteRequest : pb::IMessage<QosPrioritySessionDeleteRequest> {
    private static readonly pb::MessageParser<QosPrioritySessionDeleteRequest> _parser = new pb::MessageParser<QosPrioritySessionDeleteRequest>(() => new QosPrioritySessionDeleteRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPrioritySessionDeleteRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteRequest(QosPrioritySessionDeleteRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      profile_ = other.profile_;
      sessionId_ = other.sessionId_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteRequest Clone() {
      return new QosPrioritySessionDeleteRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    ///
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profile" field.</summary>
    public const int ProfileFieldNumber = 3;
    private global::DistributedMatchEngine.QosSessionProfile profile_ = 0;
    /// <summary>
    ///
    /// QOS Priority Session profile name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosSessionProfile Profile {
      get { return profile_; }
      set {
        profile_ = value;
      }
    }

    /// <summary>Field number for the "session_id" field.</summary>
    public const int SessionIdFieldNumber = 4;
    private string sessionId_ = "";
    /// <summary>
    ///
    /// QOS Priority Session ID to be deleted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionId {
      get { return sessionId_; }
      set {
        sessionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPrioritySessionDeleteRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPrioritySessionDeleteRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (Profile != other.Profile) return false;
      if (SessionId != other.SessionId) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (Profile != 0) hash ^= Profile.GetHashCode();
      if (SessionId.Length != 0) hash ^= SessionId.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (Profile != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Profile);
      }
      if (SessionId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SessionId);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (Profile != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Profile);
      }
      if (SessionId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionId);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPrioritySessionDeleteRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.Profile != 0) {
        Profile = other.Profile;
      }
      if (other.SessionId.Length != 0) {
        SessionId = other.SessionId;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 24: {
            Profile = (global::DistributedMatchEngine.QosSessionProfile) input.ReadEnum();
            break;
          }
          case 34: {
            SessionId = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPrioritySessionDeleteReply : pb::IMessage<QosPrioritySessionDeleteReply> {
    private static readonly pb::MessageParser<QosPrioritySessionDeleteReply> _parser = new pb::MessageParser<QosPrioritySessionDeleteReply>(() => new QosPrioritySessionDeleteReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPrioritySessionDeleteReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteReply(QosPrioritySessionDeleteReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPrioritySessionDeleteReply Clone() {
      return new QosPrioritySessionDeleteReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.QosPrioritySessionDeleteReply.Types.DeleteStatus status_ = 0;
    /// <summary>
    /// Status return.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.QosPrioritySessionDeleteReply.Types.DeleteStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPrioritySessionDeleteReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPrioritySessionDeleteReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPrioritySessionDeleteReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.QosPrioritySessionDeleteReply.Types.DeleteStatus) input.ReadEnum();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the QosPrioritySessionDeleteReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DeleteStatus {
        [pbr::OriginalName("QDEL_UNKNOWN")] QdelUnknown = 0,
        [pbr::OriginalName("QDEL_DELETED")] QdelDeleted = 1,
        [pbr::OriginalName("QDEL_NOT_FOUND")] QdelNotFound = 2,
      }

    }
    #endregion

  }

  public sealed partial class VerifyLocationRequest : pb::IMessage<VerifyLocationRequest> {
    private static readonly pb::MessageParser<VerifyLocationRequest> _parser = new pb::MessageParser<VerifyLocationRequest>(() => new VerifyLocationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyLocationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationRequest(VerifyLocationRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      carrierName_ = other.carrierName_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      verifyLocToken_ = other.verifyLocToken_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationRequest Clone() {
      return new VerifyLocationRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    ///
    /// Session Cookie
    ///
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    ///
    /// Carrier Name
    ///
    /// Unique carrier identification (typically MCC + MNC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 4;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    ///
    /// GPS Location
    ///
    /// The GPS location to verify
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "verify_loc_token" field.</summary>
    public const int VerifyLocTokenFieldNumber = 5;
    private string verifyLocToken_ = "";
    /// <summary>
    ///
    /// Verify Location Token
    ///
    /// Must be retrieved from TokenServerURI
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VerifyLocToken {
      get { return verifyLocToken_; }
      set {
        verifyLocToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    ///
    /// Tags
    ///
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyLocationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyLocationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (CarrierName != other.CarrierName) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (VerifyLocToken != other.VerifyLocToken) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      if (VerifyLocToken.Length != 0) hash ^= VerifyLocToken.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GpsLocation);
      }
      if (VerifyLocToken.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(VerifyLocToken);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      if (VerifyLocToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VerifyLocToken);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyLocationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      if (other.VerifyLocToken.Length != 0) {
        VerifyLocToken = other.VerifyLocToken;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 34: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 42: {
            VerifyLocToken = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class VerifyLocationReply : pb::IMessage<VerifyLocationReply> {
    private static readonly pb::MessageParser<VerifyLocationReply> _parser = new pb::MessageParser<VerifyLocationReply>(() => new VerifyLocationReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VerifyLocationReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationReply(VerifyLocationReply other) : this() {
      ver_ = other.ver_;
      towerStatus_ = other.towerStatus_;
      gpsLocationStatus_ = other.gpsLocationStatus_;
      gpsLocationAccuracyKm_ = other.gpsLocationAccuracyKm_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VerifyLocationReply Clone() {
      return new VerifyLocationReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "tower_status" field.</summary>
    public const int TowerStatusFieldNumber = 2;
    private global::DistributedMatchEngine.VerifyLocationReply.Types.TowerStatus towerStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.VerifyLocationReply.Types.TowerStatus TowerStatus {
      get { return towerStatus_; }
      set {
        towerStatus_ = value;
      }
    }

    /// <summary>Field number for the "gps_location_status" field.</summary>
    public const int GpsLocationStatusFieldNumber = 3;
    private global::DistributedMatchEngine.VerifyLocationReply.Types.GPSLocationStatus gpsLocationStatus_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.VerifyLocationReply.Types.GPSLocationStatus GpsLocationStatus {
      get { return gpsLocationStatus_; }
      set {
        gpsLocationStatus_ = value;
      }
    }

    /// <summary>Field number for the "gps_location_accuracy_km" field.</summary>
    public const int GpsLocationAccuracyKmFieldNumber = 4;
    private double gpsLocationAccuracyKm_;
    /// <summary>
    /// location accuracy, the location is verified to
    /// be within this number of kilometers.  Negative value
    /// means no verification was performed
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double GpsLocationAccuracyKm {
      get { return gpsLocationAccuracyKm_; }
      set {
        gpsLocationAccuracyKm_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VerifyLocationReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VerifyLocationReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (TowerStatus != other.TowerStatus) return false;
      if (GpsLocationStatus != other.GpsLocationStatus) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(GpsLocationAccuracyKm, other.GpsLocationAccuracyKm)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (TowerStatus != 0) hash ^= TowerStatus.GetHashCode();
      if (GpsLocationStatus != 0) hash ^= GpsLocationStatus.GetHashCode();
      if (GpsLocationAccuracyKm != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(GpsLocationAccuracyKm);
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (TowerStatus != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) TowerStatus);
      }
      if (GpsLocationStatus != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) GpsLocationStatus);
      }
      if (GpsLocationAccuracyKm != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(GpsLocationAccuracyKm);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (TowerStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TowerStatus);
      }
      if (GpsLocationStatus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GpsLocationStatus);
      }
      if (GpsLocationAccuracyKm != 0D) {
        size += 1 + 8;
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VerifyLocationReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.TowerStatus != 0) {
        TowerStatus = other.TowerStatus;
      }
      if (other.GpsLocationStatus != 0) {
        GpsLocationStatus = other.GpsLocationStatus;
      }
      if (other.GpsLocationAccuracyKm != 0D) {
        GpsLocationAccuracyKm = other.GpsLocationAccuracyKm;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            TowerStatus = (global::DistributedMatchEngine.VerifyLocationReply.Types.TowerStatus) input.ReadEnum();
            break;
          }
          case 24: {
            GpsLocationStatus = (global::DistributedMatchEngine.VerifyLocationReply.Types.GPSLocationStatus) input.ReadEnum();
            break;
          }
          case 33: {
            GpsLocationAccuracyKm = input.ReadDouble();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VerifyLocationReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of the reply
      /// </summary>
      public enum TowerStatus {
        [pbr::OriginalName("TOWER_UNKNOWN")] TowerUnknown = 0,
        [pbr::OriginalName("CONNECTED_TO_SPECIFIED_TOWER")] ConnectedToSpecifiedTower = 1,
        [pbr::OriginalName("NOT_CONNECTED_TO_SPECIFIED_TOWER")] NotConnectedToSpecifiedTower = 2,
      }

      public enum GPSLocationStatus {
        [pbr::OriginalName("LOC_UNKNOWN")] LocUnknown = 0,
        [pbr::OriginalName("LOC_VERIFIED")] LocVerified = 1,
        [pbr::OriginalName("LOC_MISMATCH_SAME_COUNTRY")] LocMismatchSameCountry = 2,
        [pbr::OriginalName("LOC_MISMATCH_OTHER_COUNTRY")] LocMismatchOtherCountry = 3,
        [pbr::OriginalName("LOC_ROAMING_COUNTRY_MATCH")] LocRoamingCountryMatch = 4,
        [pbr::OriginalName("LOC_ROAMING_COUNTRY_MISMATCH")] LocRoamingCountryMismatch = 5,
        [pbr::OriginalName("LOC_ERROR_UNAUTHORIZED")] LocErrorUnauthorized = 6,
        [pbr::OriginalName("LOC_ERROR_OTHER")] LocErrorOther = 7,
      }

    }
    #endregion

  }

  public sealed partial class GetLocationRequest : pb::IMessage<GetLocationRequest> {
    private static readonly pb::MessageParser<GetLocationRequest> _parser = new pb::MessageParser<GetLocationRequest>(() => new GetLocationRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocationRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationRequest(GetLocationRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      carrierName_ = other.carrierName_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationRequest Clone() {
      return new GetLocationRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    /// Unique carrier identification (typically MCC + MNC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocationRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocationRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (CarrierName != other.CarrierName) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocationRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GetLocationReply : pb::IMessage<GetLocationReply> {
    private static readonly pb::MessageParser<GetLocationReply> _parser = new pb::MessageParser<GetLocationReply>(() => new GetLocationReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GetLocationReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationReply(GetLocationReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      carrierName_ = other.carrierName_;
      tower_ = other.tower_;
      networkLocation_ = other.networkLocation_ != null ? other.networkLocation_.Clone() : null;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GetLocationReply Clone() {
      return new GetLocationReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.GetLocationReply.Types.LocStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.GetLocationReply.Types.LocStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    /// Unique carrier identification (typically MCC + MNC)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tower" field.</summary>
    public const int TowerFieldNumber = 4;
    private ulong tower_;
    /// <summary>
    /// The tower that the user is currently connected to
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Tower {
      get { return tower_; }
      set {
        tower_ = value;
      }
    }

    /// <summary>Field number for the "network_location" field.</summary>
    public const int NetworkLocationFieldNumber = 5;
    private global::DistributedMatchEngine.Loc networkLocation_;
    /// <summary>
    /// The GPS location of the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc NetworkLocation {
      get { return networkLocation_; }
      set {
        networkLocation_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GetLocationReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GetLocationReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if (CarrierName != other.CarrierName) return false;
      if (Tower != other.Tower) return false;
      if (!object.Equals(NetworkLocation, other.NetworkLocation)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (Tower != 0UL) hash ^= Tower.GetHashCode();
      if (networkLocation_ != null) hash ^= NetworkLocation.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      if (Tower != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(Tower);
      }
      if (networkLocation_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(NetworkLocation);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (Tower != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Tower);
      }
      if (networkLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NetworkLocation);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GetLocationReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.Tower != 0UL) {
        Tower = other.Tower;
      }
      if (other.networkLocation_ != null) {
        if (networkLocation_ == null) {
          NetworkLocation = new global::DistributedMatchEngine.Loc();
        }
        NetworkLocation.MergeFrom(other.NetworkLocation);
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.GetLocationReply.Types.LocStatus) input.ReadEnum();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 32: {
            Tower = input.ReadUInt64();
            break;
          }
          case 42: {
            if (networkLocation_ == null) {
              NetworkLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(NetworkLocation);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the GetLocationReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of the reply
      /// </summary>
      public enum LocStatus {
        [pbr::OriginalName("LOC_UNKNOWN")] LocUnknown = 0,
        [pbr::OriginalName("LOC_FOUND")] LocFound = 1,
        /// <summary>
        /// The user does not allow his location to be tracked
        /// </summary>
        [pbr::OriginalName("LOC_DENIED")] LocDenied = 2,
      }

    }
    #endregion

  }

  public sealed partial class AppInstListRequest : pb::IMessage<AppInstListRequest> {
    private static readonly pb::MessageParser<AppInstListRequest> _parser = new pb::MessageParser<AppInstListRequest>(() => new AppInstListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppInstListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListRequest(AppInstListRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      carrierName_ = other.carrierName_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      limit_ = other.limit_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListRequest Clone() {
      return new AppInstListRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 3;
    private string carrierName_ = "";
    /// <summary>
    ///
    /// Carrier Name
    ///
    /// _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
    /// If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 4;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    /// The GPS location of the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "limit" field.</summary>
    public const int LimitFieldNumber = 6;
    private uint limit_;
    /// <summary>
    /// _(optional)_ Limit the number of results, defaults to 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppInstListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppInstListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (CarrierName != other.CarrierName) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (Limit != other.Limit) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      if (Limit != 0) hash ^= Limit.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(CarrierName);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GpsLocation);
      }
      if (Limit != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(Limit);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      if (Limit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Limit);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppInstListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      if (other.Limit != 0) {
        Limit = other.Limit;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            CarrierName = input.ReadString();
            break;
          }
          case 34: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 48: {
            Limit = input.ReadUInt32();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Appinstance : pb::IMessage<Appinstance> {
    private static readonly pb::MessageParser<Appinstance> _parser = new pb::MessageParser<Appinstance>(() => new Appinstance());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Appinstance> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appinstance() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appinstance(Appinstance other) : this() {
      appName_ = other.appName_;
      appVers_ = other.appVers_;
      fqdn_ = other.fqdn_;
      ports_ = other.ports_.Clone();
      orgName_ = other.orgName_;
      edgeEventsCookie_ = other.edgeEventsCookie_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Appinstance Clone() {
      return new Appinstance(this);
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 1;
    private string appName_ = "";
    /// <summary>
    /// App Instance Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_vers" field.</summary>
    public const int AppVersFieldNumber = 2;
    private string appVers_ = "";
    /// <summary>
    /// App Instance Version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVers {
      get { return appVers_; }
      set {
        appVers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fqdn" field.</summary>
    public const int FqdnFieldNumber = 3;
    private string fqdn_ = "";
    /// <summary>
    /// App Instance FQDN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Fqdn {
      get { return fqdn_; }
      set {
        fqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.AppPort> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(34, global::DistributedMatchEngine.AppPort.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.AppPort> ports_ = new pbc::RepeatedField<global::DistributedMatchEngine.AppPort>();
    /// <summary>
    /// ports to access app
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.AppPort> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "org_name" field.</summary>
    public const int OrgNameFieldNumber = 5;
    private string orgName_ = "";
    /// <summary>
    /// App Organization Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrgName {
      get { return orgName_; }
      set {
        orgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "edge_events_cookie" field.</summary>
    public const int EdgeEventsCookieFieldNumber = 6;
    private string edgeEventsCookie_ = "";
    /// <summary>
    /// Session Cookie for specific EdgeEvents for specific AppInst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EdgeEventsCookie {
      get { return edgeEventsCookie_; }
      set {
        edgeEventsCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Appinstance);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Appinstance other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppName != other.AppName) return false;
      if (AppVers != other.AppVers) return false;
      if (Fqdn != other.Fqdn) return false;
      if(!ports_.Equals(other.ports_)) return false;
      if (OrgName != other.OrgName) return false;
      if (EdgeEventsCookie != other.EdgeEventsCookie) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (AppVers.Length != 0) hash ^= AppVers.GetHashCode();
      if (Fqdn.Length != 0) hash ^= Fqdn.GetHashCode();
      hash ^= ports_.GetHashCode();
      if (OrgName.Length != 0) hash ^= OrgName.GetHashCode();
      if (EdgeEventsCookie.Length != 0) hash ^= EdgeEventsCookie.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppName);
      }
      if (AppVers.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppVers);
      }
      if (Fqdn.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Fqdn);
      }
      ports_.WriteTo(output, _repeated_ports_codec);
      if (OrgName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(OrgName);
      }
      if (EdgeEventsCookie.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(EdgeEventsCookie);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (AppVers.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVers);
      }
      if (Fqdn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Fqdn);
      }
      size += ports_.CalculateSize(_repeated_ports_codec);
      if (OrgName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrgName);
      }
      if (EdgeEventsCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EdgeEventsCookie);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Appinstance other) {
      if (other == null) {
        return;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.AppVers.Length != 0) {
        AppVers = other.AppVers;
      }
      if (other.Fqdn.Length != 0) {
        Fqdn = other.Fqdn;
      }
      ports_.Add(other.ports_);
      if (other.OrgName.Length != 0) {
        OrgName = other.OrgName;
      }
      if (other.EdgeEventsCookie.Length != 0) {
        EdgeEventsCookie = other.EdgeEventsCookie;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppName = input.ReadString();
            break;
          }
          case 18: {
            AppVers = input.ReadString();
            break;
          }
          case 26: {
            Fqdn = input.ReadString();
            break;
          }
          case 34: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
          case 42: {
            OrgName = input.ReadString();
            break;
          }
          case 50: {
            EdgeEventsCookie = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CloudletLocation : pb::IMessage<CloudletLocation> {
    private static readonly pb::MessageParser<CloudletLocation> _parser = new pb::MessageParser<CloudletLocation>(() => new CloudletLocation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CloudletLocation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudletLocation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudletLocation(CloudletLocation other) : this() {
      carrierName_ = other.carrierName_;
      cloudletName_ = other.cloudletName_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      distance_ = other.distance_;
      appinstances_ = other.appinstances_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CloudletLocation Clone() {
      return new CloudletLocation(this);
    }

    /// <summary>Field number for the "carrier_name" field.</summary>
    public const int CarrierNameFieldNumber = 1;
    private string carrierName_ = "";
    /// <summary>
    /// Cloudlet Organization Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CarrierName {
      get { return carrierName_; }
      set {
        carrierName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cloudlet_name" field.</summary>
    public const int CloudletNameFieldNumber = 2;
    private string cloudletName_ = "";
    /// <summary>
    /// Cloudlet Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CloudletName {
      get { return cloudletName_; }
      set {
        cloudletName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 3;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    /// The GPS Location of the cloudlet
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "distance" field.</summary>
    public const int DistanceFieldNumber = 4;
    private double distance_;
    /// <summary>
    /// Distance of cloudlet vs loc in request
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Distance {
      get { return distance_; }
      set {
        distance_ = value;
      }
    }

    /// <summary>Field number for the "appinstances" field.</summary>
    public const int AppinstancesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.Appinstance> _repeated_appinstances_codec
        = pb::FieldCodec.ForMessage(42, global::DistributedMatchEngine.Appinstance.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.Appinstance> appinstances_ = new pbc::RepeatedField<global::DistributedMatchEngine.Appinstance>();
    /// <summary>
    /// App instances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.Appinstance> Appinstances {
      get { return appinstances_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CloudletLocation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CloudletLocation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CarrierName != other.CarrierName) return false;
      if (CloudletName != other.CloudletName) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Distance, other.Distance)) return false;
      if(!appinstances_.Equals(other.appinstances_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CarrierName.Length != 0) hash ^= CarrierName.GetHashCode();
      if (CloudletName.Length != 0) hash ^= CloudletName.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      if (Distance != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Distance);
      hash ^= appinstances_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CarrierName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(CarrierName);
      }
      if (CloudletName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CloudletName);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GpsLocation);
      }
      if (Distance != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Distance);
      }
      appinstances_.WriteTo(output, _repeated_appinstances_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CarrierName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CarrierName);
      }
      if (CloudletName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloudletName);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      if (Distance != 0D) {
        size += 1 + 8;
      }
      size += appinstances_.CalculateSize(_repeated_appinstances_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CloudletLocation other) {
      if (other == null) {
        return;
      }
      if (other.CarrierName.Length != 0) {
        CarrierName = other.CarrierName;
      }
      if (other.CloudletName.Length != 0) {
        CloudletName = other.CloudletName;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      if (other.Distance != 0D) {
        Distance = other.Distance;
      }
      appinstances_.Add(other.appinstances_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            CarrierName = input.ReadString();
            break;
          }
          case 18: {
            CloudletName = input.ReadString();
            break;
          }
          case 26: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 33: {
            Distance = input.ReadDouble();
            break;
          }
          case 42: {
            appinstances_.AddEntriesFrom(input, _repeated_appinstances_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppInstListReply : pb::IMessage<AppInstListReply> {
    private static readonly pb::MessageParser<AppInstListReply> _parser = new pb::MessageParser<AppInstListReply>(() => new AppInstListReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppInstListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListReply(AppInstListReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      cloudlets_ = other.cloudlets_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppInstListReply Clone() {
      return new AppInstListReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.AppInstListReply.Types.AIStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.AppInstListReply.Types.AIStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "cloudlets" field.</summary>
    public const int CloudletsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.CloudletLocation> _repeated_cloudlets_codec
        = pb::FieldCodec.ForMessage(26, global::DistributedMatchEngine.CloudletLocation.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.CloudletLocation> cloudlets_ = new pbc::RepeatedField<global::DistributedMatchEngine.CloudletLocation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.CloudletLocation> Cloudlets {
      get { return cloudlets_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppInstListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppInstListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if(!cloudlets_.Equals(other.cloudlets_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= cloudlets_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      cloudlets_.WriteTo(output, _repeated_cloudlets_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += cloudlets_.CalculateSize(_repeated_cloudlets_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppInstListReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      cloudlets_.Add(other.cloudlets_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.AppInstListReply.Types.AIStatus) input.ReadEnum();
            break;
          }
          case 26: {
            cloudlets_.AddEntriesFrom(input, _repeated_cloudlets_codec);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AppInstListReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of the reply
      /// </summary>
      public enum AIStatus {
        [pbr::OriginalName("AI_UNDEFINED")] AiUndefined = 0,
        [pbr::OriginalName("AI_SUCCESS")] AiSuccess = 1,
        [pbr::OriginalName("AI_FAIL")] AiFail = 2,
      }

    }
    #endregion

  }

  public sealed partial class FqdnListRequest : pb::IMessage<FqdnListRequest> {
    private static readonly pb::MessageParser<FqdnListRequest> _parser = new pb::MessageParser<FqdnListRequest>(() => new FqdnListRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FqdnListRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListRequest(FqdnListRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListRequest Clone() {
      return new FqdnListRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FqdnListRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FqdnListRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FqdnListRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppFqdn : pb::IMessage<AppFqdn> {
    private static readonly pb::MessageParser<AppFqdn> _parser = new pb::MessageParser<AppFqdn>(() => new AppFqdn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppFqdn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppFqdn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppFqdn(AppFqdn other) : this() {
      appName_ = other.appName_;
      appVers_ = other.appVers_;
      orgName_ = other.orgName_;
      fqdns_ = other.fqdns_.Clone();
      androidPackageName_ = other.androidPackageName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppFqdn Clone() {
      return new AppFqdn(this);
    }

    /// <summary>Field number for the "app_name" field.</summary>
    public const int AppNameFieldNumber = 1;
    private string appName_ = "";
    /// <summary>
    /// App  Name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppName {
      get { return appName_; }
      set {
        appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "app_vers" field.</summary>
    public const int AppVersFieldNumber = 2;
    private string appVers_ = "";
    /// <summary>
    /// App Version
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppVers {
      get { return appVers_; }
      set {
        appVers_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "org_name" field.</summary>
    public const int OrgNameFieldNumber = 3;
    private string orgName_ = "";
    /// <summary>
    /// App organization name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OrgName {
      get { return orgName_; }
      set {
        orgName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fqdns" field.</summary>
    public const int FqdnsFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_fqdns_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> fqdns_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// App FQDN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Fqdns {
      get { return fqdns_; }
    }

    /// <summary>Field number for the "android_package_name" field.</summary>
    public const int AndroidPackageNameFieldNumber = 5;
    private string androidPackageName_ = "";
    /// <summary>
    /// _(optional)_ Android package name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AndroidPackageName {
      get { return androidPackageName_; }
      set {
        androidPackageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppFqdn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppFqdn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AppName != other.AppName) return false;
      if (AppVers != other.AppVers) return false;
      if (OrgName != other.OrgName) return false;
      if(!fqdns_.Equals(other.fqdns_)) return false;
      if (AndroidPackageName != other.AndroidPackageName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AppName.Length != 0) hash ^= AppName.GetHashCode();
      if (AppVers.Length != 0) hash ^= AppVers.GetHashCode();
      if (OrgName.Length != 0) hash ^= OrgName.GetHashCode();
      hash ^= fqdns_.GetHashCode();
      if (AndroidPackageName.Length != 0) hash ^= AndroidPackageName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AppName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AppName);
      }
      if (AppVers.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppVers);
      }
      if (OrgName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(OrgName);
      }
      fqdns_.WriteTo(output, _repeated_fqdns_codec);
      if (AndroidPackageName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(AndroidPackageName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AppName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppName);
      }
      if (AppVers.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVers);
      }
      if (OrgName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OrgName);
      }
      size += fqdns_.CalculateSize(_repeated_fqdns_codec);
      if (AndroidPackageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AndroidPackageName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppFqdn other) {
      if (other == null) {
        return;
      }
      if (other.AppName.Length != 0) {
        AppName = other.AppName;
      }
      if (other.AppVers.Length != 0) {
        AppVers = other.AppVers;
      }
      if (other.OrgName.Length != 0) {
        OrgName = other.OrgName;
      }
      fqdns_.Add(other.fqdns_);
      if (other.AndroidPackageName.Length != 0) {
        AndroidPackageName = other.AndroidPackageName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            AppName = input.ReadString();
            break;
          }
          case 18: {
            AppVers = input.ReadString();
            break;
          }
          case 26: {
            OrgName = input.ReadString();
            break;
          }
          case 34: {
            fqdns_.AddEntriesFrom(input, _repeated_fqdns_codec);
            break;
          }
          case 42: {
            AndroidPackageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FqdnListReply : pb::IMessage<FqdnListReply> {
    private static readonly pb::MessageParser<FqdnListReply> _parser = new pb::MessageParser<FqdnListReply>(() => new FqdnListReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FqdnListReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListReply(FqdnListReply other) : this() {
      ver_ = other.ver_;
      appFqdns_ = other.appFqdns_.Clone();
      status_ = other.status_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FqdnListReply Clone() {
      return new FqdnListReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "app_fqdns" field.</summary>
    public const int AppFqdnsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.AppFqdn> _repeated_appFqdns_codec
        = pb::FieldCodec.ForMessage(26, global::DistributedMatchEngine.AppFqdn.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.AppFqdn> appFqdns_ = new pbc::RepeatedField<global::DistributedMatchEngine.AppFqdn>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.AppFqdn> AppFqdns {
      get { return appFqdns_; }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::DistributedMatchEngine.FqdnListReply.Types.FLStatus status_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.FqdnListReply.Types.FLStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FqdnListReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FqdnListReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if(!appFqdns_.Equals(other.appFqdns_)) return false;
      if (Status != other.Status) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      hash ^= appFqdns_.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      appFqdns_.WriteTo(output, _repeated_appFqdns_codec);
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      size += appFqdns_.CalculateSize(_repeated_appFqdns_codec);
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FqdnListReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      appFqdns_.Add(other.appFqdns_);
      if (other.Status != 0) {
        Status = other.Status;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 26: {
            appFqdns_.AddEntriesFrom(input, _repeated_appFqdns_codec);
            break;
          }
          case 32: {
            Status = (global::DistributedMatchEngine.FqdnListReply.Types.FLStatus) input.ReadEnum();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FqdnListReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Status of the reply
      /// </summary>
      public enum FLStatus {
        [pbr::OriginalName("FL_UNDEFINED")] FlUndefined = 0,
        [pbr::OriginalName("FL_SUCCESS")] FlSuccess = 1,
        [pbr::OriginalName("FL_FAIL")] FlFail = 2,
      }

    }
    #endregion

  }

  public sealed partial class AppOfficialFqdnRequest : pb::IMessage<AppOfficialFqdnRequest> {
    private static readonly pb::MessageParser<AppOfficialFqdnRequest> _parser = new pb::MessageParser<AppOfficialFqdnRequest>(() => new AppOfficialFqdnRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppOfficialFqdnRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnRequest(AppOfficialFqdnRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnRequest Clone() {
      return new AppOfficialFqdnRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 3;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    /// The GPS location of the user
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppOfficialFqdnRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppOfficialFqdnRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(GpsLocation);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppOfficialFqdnRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AppOfficialFqdnReply : pb::IMessage<AppOfficialFqdnReply> {
    private static readonly pb::MessageParser<AppOfficialFqdnReply> _parser = new pb::MessageParser<AppOfficialFqdnReply>(() => new AppOfficialFqdnReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppOfficialFqdnReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnReply(AppOfficialFqdnReply other) : this() {
      ver_ = other.ver_;
      appOfficialFqdn_ = other.appOfficialFqdn_;
      clientToken_ = other.clientToken_;
      status_ = other.status_;
      ports_ = other.ports_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppOfficialFqdnReply Clone() {
      return new AppOfficialFqdnReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "app_official_fqdn" field.</summary>
    public const int AppOfficialFqdnFieldNumber = 2;
    private string appOfficialFqdn_ = "";
    /// <summary>
    /// The FQDN to which the app is reached independent of the edge
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AppOfficialFqdn {
      get { return appOfficialFqdn_; }
      set {
        appOfficialFqdn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "client_token" field.</summary>
    public const int ClientTokenFieldNumber = 3;
    private string clientToken_ = "";
    /// <summary>
    /// Tokenized client data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClientToken {
      get { return clientToken_; }
      set {
        clientToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 4;
    private global::DistributedMatchEngine.AppOfficialFqdnReply.Types.AOFStatus status_ = 0;
    /// <summary>
    /// Status of the reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.AppOfficialFqdnReply.Types.AOFStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "ports" field.</summary>
    public const int PortsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.AppPort> _repeated_ports_codec
        = pb::FieldCodec.ForMessage(42, global::DistributedMatchEngine.AppPort.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.AppPort> ports_ = new pbc::RepeatedField<global::DistributedMatchEngine.AppPort>();
    /// <summary>
    /// List of Service Endpoints for AppInst
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.AppPort> Ports {
      get { return ports_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppOfficialFqdnReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppOfficialFqdnReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (AppOfficialFqdn != other.AppOfficialFqdn) return false;
      if (ClientToken != other.ClientToken) return false;
      if (Status != other.Status) return false;
      if(!ports_.Equals(other.ports_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (AppOfficialFqdn.Length != 0) hash ^= AppOfficialFqdn.GetHashCode();
      if (ClientToken.Length != 0) hash ^= ClientToken.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= ports_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (AppOfficialFqdn.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AppOfficialFqdn);
      }
      if (ClientToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ClientToken);
      }
      if (Status != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Status);
      }
      ports_.WriteTo(output, _repeated_ports_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (AppOfficialFqdn.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AppOfficialFqdn);
      }
      if (ClientToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClientToken);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += ports_.CalculateSize(_repeated_ports_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppOfficialFqdnReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.AppOfficialFqdn.Length != 0) {
        AppOfficialFqdn = other.AppOfficialFqdn;
      }
      if (other.ClientToken.Length != 0) {
        ClientToken = other.ClientToken;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      ports_.Add(other.ports_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            AppOfficialFqdn = input.ReadString();
            break;
          }
          case 26: {
            ClientToken = input.ReadString();
            break;
          }
          case 32: {
            Status = (global::DistributedMatchEngine.AppOfficialFqdnReply.Types.AOFStatus) input.ReadEnum();
            break;
          }
          case 42: {
            ports_.AddEntriesFrom(input, _repeated_ports_codec);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the AppOfficialFqdnReply message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum AOFStatus {
        [pbr::OriginalName("AOF_UNDEFINED")] AofUndefined = 0,
        [pbr::OriginalName("AOF_SUCCESS")] AofSuccess = 1,
        [pbr::OriginalName("AOF_FAIL")] AofFail = 2,
      }

    }
    #endregion

  }

  public sealed partial class DynamicLocGroupRequest : pb::IMessage<DynamicLocGroupRequest> {
    private static readonly pb::MessageParser<DynamicLocGroupRequest> _parser = new pb::MessageParser<DynamicLocGroupRequest>(() => new DynamicLocGroupRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicLocGroupRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupRequest(DynamicLocGroupRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      lgId_ = other.lgId_;
      commType_ = other.commType_;
      userData_ = other.userData_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupRequest Clone() {
      return new DynamicLocGroupRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lg_id" field.</summary>
    public const int LgIdFieldNumber = 3;
    private ulong lgId_;
    /// <summary>
    /// Dynamic Location Group Id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong LgId {
      get { return lgId_; }
      set {
        lgId_ = value;
      }
    }

    /// <summary>Field number for the "comm_type" field.</summary>
    public const int CommTypeFieldNumber = 11;
    private global::DistributedMatchEngine.DynamicLocGroupRequest.Types.DlgCommType commType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.DynamicLocGroupRequest.Types.DlgCommType CommType {
      get { return commType_; }
      set {
        commType_ = value;
      }
    }

    /// <summary>Field number for the "user_data" field.</summary>
    public const int UserDataFieldNumber = 12;
    private string userData_ = "";
    /// <summary>
    /// Unused
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string UserData {
      get { return userData_; }
      set {
        userData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicLocGroupRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicLocGroupRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if (LgId != other.LgId) return false;
      if (CommType != other.CommType) return false;
      if (UserData != other.UserData) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (LgId != 0UL) hash ^= LgId.GetHashCode();
      if (CommType != 0) hash ^= CommType.GetHashCode();
      if (UserData.Length != 0) hash ^= UserData.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      if (LgId != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(LgId);
      }
      if (CommType != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) CommType);
      }
      if (UserData.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(UserData);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (LgId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LgId);
      }
      if (CommType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CommType);
      }
      if (UserData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UserData);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicLocGroupRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.LgId != 0UL) {
        LgId = other.LgId;
      }
      if (other.CommType != 0) {
        CommType = other.CommType;
      }
      if (other.UserData.Length != 0) {
        UserData = other.UserData;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 24: {
            LgId = input.ReadUInt64();
            break;
          }
          case 88: {
            CommType = (global::DistributedMatchEngine.DynamicLocGroupRequest.Types.DlgCommType) input.ReadEnum();
            break;
          }
          case 98: {
            UserData = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DynamicLocGroupRequest message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Use Secure communication or Open with the group
      /// </summary>
      public enum DlgCommType {
        [pbr::OriginalName("DLG_UNDEFINED")] DlgUndefined = 0,
        [pbr::OriginalName("DLG_SECURE")] DlgSecure = 1,
        [pbr::OriginalName("DLG_OPEN")] DlgOpen = 2,
      }

    }
    #endregion

  }

  public sealed partial class DynamicLocGroupReply : pb::IMessage<DynamicLocGroupReply> {
    private static readonly pb::MessageParser<DynamicLocGroupReply> _parser = new pb::MessageParser<DynamicLocGroupReply>(() => new DynamicLocGroupReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DynamicLocGroupReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupReply(DynamicLocGroupReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      errorCode_ = other.errorCode_;
      groupCookie_ = other.groupCookie_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DynamicLocGroupReply Clone() {
      return new DynamicLocGroupReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.ReplyStatus status_ = 0;
    /// <summary>
    /// Status of the reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.ReplyStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "error_code" field.</summary>
    public const int ErrorCodeFieldNumber = 3;
    private uint errorCode_;
    /// <summary>
    /// Error Code based on Failure
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ErrorCode {
      get { return errorCode_; }
      set {
        errorCode_ = value;
      }
    }

    /// <summary>Field number for the "group_cookie" field.</summary>
    public const int GroupCookieFieldNumber = 5;
    private string groupCookie_ = "";
    /// <summary>
    /// Group Cookie for Secure Group Communication
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string GroupCookie {
      get { return groupCookie_; }
      set {
        groupCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DynamicLocGroupReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DynamicLocGroupReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if (ErrorCode != other.ErrorCode) return false;
      if (GroupCookie != other.GroupCookie) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      if (ErrorCode != 0) hash ^= ErrorCode.GetHashCode();
      if (GroupCookie.Length != 0) hash ^= GroupCookie.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      if (ErrorCode != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(ErrorCode);
      }
      if (GroupCookie.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(GroupCookie);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      if (ErrorCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ErrorCode);
      }
      if (GroupCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(GroupCookie);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DynamicLocGroupReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      if (other.ErrorCode != 0) {
        ErrorCode = other.ErrorCode;
      }
      if (other.GroupCookie.Length != 0) {
        GroupCookie = other.GroupCookie;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.ReplyStatus) input.ReadEnum();
            break;
          }
          case 24: {
            ErrorCode = input.ReadUInt32();
            break;
          }
          case 42: {
            GroupCookie = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPosition : pb::IMessage<QosPosition> {
    private static readonly pb::MessageParser<QosPosition> _parser = new pb::MessageParser<QosPosition>(() => new QosPosition());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPosition> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPosition() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPosition(QosPosition other) : this() {
      positionid_ = other.positionid_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPosition Clone() {
      return new QosPosition(this);
    }

    /// <summary>Field number for the "positionid" field.</summary>
    public const int PositionidFieldNumber = 1;
    private long positionid_;
    /// <summary>
    /// as set by the client, must be unique within QosRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Positionid {
      get { return positionid_; }
      set {
        positionid_ = value;
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 2;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    ///location
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPosition);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPosition other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Positionid != other.Positionid) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Positionid != 0L) hash ^= Positionid.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Positionid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Positionid);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GpsLocation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Positionid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Positionid);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPosition other) {
      if (other == null) {
        return;
      }
      if (other.Positionid != 0L) {
        Positionid = other.Positionid;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Positionid = input.ReadInt64();
            break;
          }
          case 18: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// supported band values
  /// </summary>
  public sealed partial class BandSelection : pb::IMessage<BandSelection> {
    private static readonly pb::MessageParser<BandSelection> _parser = new pb::MessageParser<BandSelection>(() => new BandSelection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BandSelection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandSelection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandSelection(BandSelection other) : this() {
      rat2G_ = other.rat2G_.Clone();
      rat3G_ = other.rat3G_.Clone();
      rat4G_ = other.rat4G_.Clone();
      rat5G_ = other.rat5G_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BandSelection Clone() {
      return new BandSelection(this);
    }

    /// <summary>Field number for the "rat2g" field.</summary>
    public const int Rat2GFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_rat2G_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> rat2G_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Radio Access Technologies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rat2G {
      get { return rat2G_; }
    }

    /// <summary>Field number for the "rat3g" field.</summary>
    public const int Rat3GFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_rat3G_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> rat3G_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rat3G {
      get { return rat3G_; }
    }

    /// <summary>Field number for the "rat4g" field.</summary>
    public const int Rat4GFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_rat4G_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> rat4G_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rat4G {
      get { return rat4G_; }
    }

    /// <summary>Field number for the "rat5g" field.</summary>
    public const int Rat5GFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_rat5G_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> rat5G_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Rat5G {
      get { return rat5G_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BandSelection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BandSelection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rat2G_.Equals(other.rat2G_)) return false;
      if(!rat3G_.Equals(other.rat3G_)) return false;
      if(!rat4G_.Equals(other.rat4G_)) return false;
      if(!rat5G_.Equals(other.rat5G_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rat2G_.GetHashCode();
      hash ^= rat3G_.GetHashCode();
      hash ^= rat4G_.GetHashCode();
      hash ^= rat5G_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rat2G_.WriteTo(output, _repeated_rat2G_codec);
      rat3G_.WriteTo(output, _repeated_rat3G_codec);
      rat4G_.WriteTo(output, _repeated_rat4G_codec);
      rat5G_.WriteTo(output, _repeated_rat5G_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rat2G_.CalculateSize(_repeated_rat2G_codec);
      size += rat3G_.CalculateSize(_repeated_rat3G_codec);
      size += rat4G_.CalculateSize(_repeated_rat4G_codec);
      size += rat5G_.CalculateSize(_repeated_rat5G_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BandSelection other) {
      if (other == null) {
        return;
      }
      rat2G_.Add(other.rat2G_);
      rat3G_.Add(other.rat3G_);
      rat4G_.Add(other.rat4G_);
      rat5G_.Add(other.rat5G_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rat2G_.AddEntriesFrom(input, _repeated_rat2G_codec);
            break;
          }
          case 18: {
            rat3G_.AddEntriesFrom(input, _repeated_rat3G_codec);
            break;
          }
          case 26: {
            rat4G_.AddEntriesFrom(input, _repeated_rat4G_codec);
            break;
          }
          case 34: {
            rat5G_.AddEntriesFrom(input, _repeated_rat5G_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// QosPositionRequest is used for both GetQosPositionKpi
  /// </summary>
  public sealed partial class QosPositionRequest : pb::IMessage<QosPositionRequest> {
    private static readonly pb::MessageParser<QosPositionRequest> _parser = new pb::MessageParser<QosPositionRequest>(() => new QosPositionRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPositionRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionRequest(QosPositionRequest other) : this() {
      ver_ = other.ver_;
      sessionCookie_ = other.sessionCookie_;
      positions_ = other.positions_.Clone();
      lteCategory_ = other.lteCategory_;
      bandSelection_ = other.bandSelection_ != null ? other.bandSelection_.Clone() : null;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionRequest Clone() {
      return new QosPositionRequest(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 2;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "positions" field.</summary>
    public const int PositionsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.QosPosition> _repeated_positions_codec
        = pb::FieldCodec.ForMessage(26, global::DistributedMatchEngine.QosPosition.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.QosPosition> positions_ = new pbc::RepeatedField<global::DistributedMatchEngine.QosPosition>();
    /// <summary>
    /// list of positions
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.QosPosition> Positions {
      get { return positions_; }
    }

    /// <summary>Field number for the "lte_category" field.</summary>
    public const int LteCategoryFieldNumber = 4;
    private int lteCategory_;
    /// <summary>
    /// _(optional)_ Client's device LTE category number.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int LteCategory {
      get { return lteCategory_; }
      set {
        lteCategory_ = value;
      }
    }

    /// <summary>Field number for the "band_selection" field.</summary>
    public const int BandSelectionFieldNumber = 5;
    private global::DistributedMatchEngine.BandSelection bandSelection_;
    /// <summary>
    /// _(optional)_ Band list used by the client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.BandSelection BandSelection {
      get { return bandSelection_; }
      set {
        bandSelection_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPositionRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPositionRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (SessionCookie != other.SessionCookie) return false;
      if(!positions_.Equals(other.positions_)) return false;
      if (LteCategory != other.LteCategory) return false;
      if (!object.Equals(BandSelection, other.BandSelection)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      hash ^= positions_.GetHashCode();
      if (LteCategory != 0) hash ^= LteCategory.GetHashCode();
      if (bandSelection_ != null) hash ^= BandSelection.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SessionCookie);
      }
      positions_.WriteTo(output, _repeated_positions_codec);
      if (LteCategory != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(LteCategory);
      }
      if (bandSelection_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BandSelection);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      size += positions_.CalculateSize(_repeated_positions_codec);
      if (LteCategory != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LteCategory);
      }
      if (bandSelection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BandSelection);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPositionRequest other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      positions_.Add(other.positions_);
      if (other.LteCategory != 0) {
        LteCategory = other.LteCategory;
      }
      if (other.bandSelection_ != null) {
        if (bandSelection_ == null) {
          BandSelection = new global::DistributedMatchEngine.BandSelection();
        }
        BandSelection.MergeFrom(other.BandSelection);
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 18: {
            SessionCookie = input.ReadString();
            break;
          }
          case 26: {
            positions_.AddEntriesFrom(input, _repeated_positions_codec);
            break;
          }
          case 32: {
            LteCategory = input.ReadInt32();
            break;
          }
          case 42: {
            if (bandSelection_ == null) {
              BandSelection = new global::DistributedMatchEngine.BandSelection();
            }
            input.ReadMessage(BandSelection);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPositionKpiResult : pb::IMessage<QosPositionKpiResult> {
    private static readonly pb::MessageParser<QosPositionKpiResult> _parser = new pb::MessageParser<QosPositionKpiResult>(() => new QosPositionKpiResult());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPositionKpiResult> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiResult() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiResult(QosPositionKpiResult other) : this() {
      positionid_ = other.positionid_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      dluserthroughputMin_ = other.dluserthroughputMin_;
      dluserthroughputAvg_ = other.dluserthroughputAvg_;
      dluserthroughputMax_ = other.dluserthroughputMax_;
      uluserthroughputMin_ = other.uluserthroughputMin_;
      uluserthroughputAvg_ = other.uluserthroughputAvg_;
      uluserthroughputMax_ = other.uluserthroughputMax_;
      latencyMin_ = other.latencyMin_;
      latencyAvg_ = other.latencyAvg_;
      latencyMax_ = other.latencyMax_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiResult Clone() {
      return new QosPositionKpiResult(this);
    }

    /// <summary>Field number for the "positionid" field.</summary>
    public const int PositionidFieldNumber = 1;
    private long positionid_;
    /// <summary>
    /// as set by the client, must be unique within one QosPositionRequest
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Positionid {
      get { return positionid_; }
      set {
        positionid_ = value;
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 2;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    /// the location which was requested
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "dluserthroughput_min" field.</summary>
    public const int DluserthroughputMinFieldNumber = 3;
    private float dluserthroughputMin_;
    /// <summary>
    /// throughput
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DluserthroughputMin {
      get { return dluserthroughputMin_; }
      set {
        dluserthroughputMin_ = value;
      }
    }

    /// <summary>Field number for the "dluserthroughput_avg" field.</summary>
    public const int DluserthroughputAvgFieldNumber = 4;
    private float dluserthroughputAvg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DluserthroughputAvg {
      get { return dluserthroughputAvg_; }
      set {
        dluserthroughputAvg_ = value;
      }
    }

    /// <summary>Field number for the "dluserthroughput_max" field.</summary>
    public const int DluserthroughputMaxFieldNumber = 5;
    private float dluserthroughputMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DluserthroughputMax {
      get { return dluserthroughputMax_; }
      set {
        dluserthroughputMax_ = value;
      }
    }

    /// <summary>Field number for the "uluserthroughput_min" field.</summary>
    public const int UluserthroughputMinFieldNumber = 6;
    private float uluserthroughputMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UluserthroughputMin {
      get { return uluserthroughputMin_; }
      set {
        uluserthroughputMin_ = value;
      }
    }

    /// <summary>Field number for the "uluserthroughput_avg" field.</summary>
    public const int UluserthroughputAvgFieldNumber = 7;
    private float uluserthroughputAvg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UluserthroughputAvg {
      get { return uluserthroughputAvg_; }
      set {
        uluserthroughputAvg_ = value;
      }
    }

    /// <summary>Field number for the "uluserthroughput_max" field.</summary>
    public const int UluserthroughputMaxFieldNumber = 8;
    private float uluserthroughputMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float UluserthroughputMax {
      get { return uluserthroughputMax_; }
      set {
        uluserthroughputMax_ = value;
      }
    }

    /// <summary>Field number for the "latency_min" field.</summary>
    public const int LatencyMinFieldNumber = 9;
    private float latencyMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LatencyMin {
      get { return latencyMin_; }
      set {
        latencyMin_ = value;
      }
    }

    /// <summary>Field number for the "latency_avg" field.</summary>
    public const int LatencyAvgFieldNumber = 10;
    private float latencyAvg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LatencyAvg {
      get { return latencyAvg_; }
      set {
        latencyAvg_ = value;
      }
    }

    /// <summary>Field number for the "latency_max" field.</summary>
    public const int LatencyMaxFieldNumber = 11;
    private float latencyMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LatencyMax {
      get { return latencyMax_; }
      set {
        latencyMax_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPositionKpiResult);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPositionKpiResult other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Positionid != other.Positionid) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DluserthroughputMin, other.DluserthroughputMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DluserthroughputAvg, other.DluserthroughputAvg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DluserthroughputMax, other.DluserthroughputMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UluserthroughputMin, other.UluserthroughputMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UluserthroughputAvg, other.UluserthroughputAvg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(UluserthroughputMax, other.UluserthroughputMax)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LatencyMin, other.LatencyMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LatencyAvg, other.LatencyAvg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LatencyMax, other.LatencyMax)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Positionid != 0L) hash ^= Positionid.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      if (DluserthroughputMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DluserthroughputMin);
      if (DluserthroughputAvg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DluserthroughputAvg);
      if (DluserthroughputMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DluserthroughputMax);
      if (UluserthroughputMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UluserthroughputMin);
      if (UluserthroughputAvg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UluserthroughputAvg);
      if (UluserthroughputMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(UluserthroughputMax);
      if (LatencyMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LatencyMin);
      if (LatencyAvg != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LatencyAvg);
      if (LatencyMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LatencyMax);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Positionid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Positionid);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(GpsLocation);
      }
      if (DluserthroughputMin != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DluserthroughputMin);
      }
      if (DluserthroughputAvg != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DluserthroughputAvg);
      }
      if (DluserthroughputMax != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(DluserthroughputMax);
      }
      if (UluserthroughputMin != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(UluserthroughputMin);
      }
      if (UluserthroughputAvg != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(UluserthroughputAvg);
      }
      if (UluserthroughputMax != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(UluserthroughputMax);
      }
      if (LatencyMin != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(LatencyMin);
      }
      if (LatencyAvg != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(LatencyAvg);
      }
      if (LatencyMax != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(LatencyMax);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Positionid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Positionid);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      if (DluserthroughputMin != 0F) {
        size += 1 + 4;
      }
      if (DluserthroughputAvg != 0F) {
        size += 1 + 4;
      }
      if (DluserthroughputMax != 0F) {
        size += 1 + 4;
      }
      if (UluserthroughputMin != 0F) {
        size += 1 + 4;
      }
      if (UluserthroughputAvg != 0F) {
        size += 1 + 4;
      }
      if (UluserthroughputMax != 0F) {
        size += 1 + 4;
      }
      if (LatencyMin != 0F) {
        size += 1 + 4;
      }
      if (LatencyAvg != 0F) {
        size += 1 + 4;
      }
      if (LatencyMax != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPositionKpiResult other) {
      if (other == null) {
        return;
      }
      if (other.Positionid != 0L) {
        Positionid = other.Positionid;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      if (other.DluserthroughputMin != 0F) {
        DluserthroughputMin = other.DluserthroughputMin;
      }
      if (other.DluserthroughputAvg != 0F) {
        DluserthroughputAvg = other.DluserthroughputAvg;
      }
      if (other.DluserthroughputMax != 0F) {
        DluserthroughputMax = other.DluserthroughputMax;
      }
      if (other.UluserthroughputMin != 0F) {
        UluserthroughputMin = other.UluserthroughputMin;
      }
      if (other.UluserthroughputAvg != 0F) {
        UluserthroughputAvg = other.UluserthroughputAvg;
      }
      if (other.UluserthroughputMax != 0F) {
        UluserthroughputMax = other.UluserthroughputMax;
      }
      if (other.LatencyMin != 0F) {
        LatencyMin = other.LatencyMin;
      }
      if (other.LatencyAvg != 0F) {
        LatencyAvg = other.LatencyAvg;
      }
      if (other.LatencyMax != 0F) {
        LatencyMax = other.LatencyMax;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Positionid = input.ReadInt64();
            break;
          }
          case 18: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 29: {
            DluserthroughputMin = input.ReadFloat();
            break;
          }
          case 37: {
            DluserthroughputAvg = input.ReadFloat();
            break;
          }
          case 45: {
            DluserthroughputMax = input.ReadFloat();
            break;
          }
          case 53: {
            UluserthroughputMin = input.ReadFloat();
            break;
          }
          case 61: {
            UluserthroughputAvg = input.ReadFloat();
            break;
          }
          case 69: {
            UluserthroughputMax = input.ReadFloat();
            break;
          }
          case 77: {
            LatencyMin = input.ReadFloat();
            break;
          }
          case 85: {
            LatencyAvg = input.ReadFloat();
            break;
          }
          case 93: {
            LatencyMax = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class QosPositionKpiReply : pb::IMessage<QosPositionKpiReply> {
    private static readonly pb::MessageParser<QosPositionKpiReply> _parser = new pb::MessageParser<QosPositionKpiReply>(() => new QosPositionKpiReply());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<QosPositionKpiReply> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiReply() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiReply(QosPositionKpiReply other) : this() {
      ver_ = other.ver_;
      status_ = other.status_;
      positionResults_ = other.positionResults_.Clone();
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public QosPositionKpiReply Clone() {
      return new QosPositionKpiReply(this);
    }

    /// <summary>Field number for the "ver" field.</summary>
    public const int VerFieldNumber = 1;
    private uint ver_;
    /// <summary>
    ///
    /// API version
    ///
    /// _(hidden)_ Reserved for future use
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ver {
      get { return ver_; }
      set {
        ver_ = value;
      }
    }

    /// <summary>Field number for the "status" field.</summary>
    public const int StatusFieldNumber = 2;
    private global::DistributedMatchEngine.ReplyStatus status_ = 0;
    /// <summary>
    /// Status of the reply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.ReplyStatus Status {
      get { return status_; }
      set {
        status_ = value;
      }
    }

    /// <summary>Field number for the "position_results" field.</summary>
    public const int PositionResultsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.QosPositionKpiResult> _repeated_positionResults_codec
        = pb::FieldCodec.ForMessage(26, global::DistributedMatchEngine.QosPositionKpiResult.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.QosPositionKpiResult> positionResults_ = new pbc::RepeatedField<global::DistributedMatchEngine.QosPositionKpiResult>();
    /// <summary>
    /// kpi details
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.QosPositionKpiResult> PositionResults {
      get { return positionResults_; }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as QosPositionKpiReply);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(QosPositionKpiReply other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ver != other.Ver) return false;
      if (Status != other.Status) return false;
      if(!positionResults_.Equals(other.positionResults_)) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ver != 0) hash ^= Ver.GetHashCode();
      if (Status != 0) hash ^= Status.GetHashCode();
      hash ^= positionResults_.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Ver != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ver);
      }
      if (Status != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Status);
      }
      positionResults_.WriteTo(output, _repeated_positionResults_codec);
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ver != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ver);
      }
      if (Status != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
      }
      size += positionResults_.CalculateSize(_repeated_positionResults_codec);
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(QosPositionKpiReply other) {
      if (other == null) {
        return;
      }
      if (other.Ver != 0) {
        Ver = other.Ver;
      }
      if (other.Status != 0) {
        Status = other.Status;
      }
      positionResults_.Add(other.positionResults_);
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ver = input.ReadUInt32();
            break;
          }
          case 16: {
            Status = (global::DistributedMatchEngine.ReplyStatus) input.ReadEnum();
            break;
          }
          case 26: {
            positionResults_.AddEntriesFrom(input, _repeated_positionResults_codec);
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Messages from SDK to DME
  /// </summary>
  public sealed partial class ClientEdgeEvent : pb::IMessage<ClientEdgeEvent> {
    private static readonly pb::MessageParser<ClientEdgeEvent> _parser = new pb::MessageParser<ClientEdgeEvent>(() => new ClientEdgeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ClientEdgeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEdgeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEdgeEvent(ClientEdgeEvent other) : this() {
      sessionCookie_ = other.sessionCookie_;
      edgeEventsCookie_ = other.edgeEventsCookie_;
      eventType_ = other.eventType_;
      gpsLocation_ = other.gpsLocation_ != null ? other.gpsLocation_.Clone() : null;
      samples_ = other.samples_.Clone();
      deviceInfoStatic_ = other.deviceInfoStatic_ != null ? other.deviceInfoStatic_.Clone() : null;
      deviceInfoDynamic_ = other.deviceInfoDynamic_ != null ? other.deviceInfoDynamic_.Clone() : null;
      customEvent_ = other.customEvent_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ClientEdgeEvent Clone() {
      return new ClientEdgeEvent(this);
    }

    /// <summary>Field number for the "session_cookie" field.</summary>
    public const int SessionCookieFieldNumber = 1;
    private string sessionCookie_ = "";
    /// <summary>
    /// Session Cookie from RegisterClientReply
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SessionCookie {
      get { return sessionCookie_; }
      set {
        sessionCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "edge_events_cookie" field.</summary>
    public const int EdgeEventsCookieFieldNumber = 2;
    private string edgeEventsCookie_ = "";
    /// <summary>
    /// Session Cookie from FindCloudletReply 
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EdgeEventsCookie {
      get { return edgeEventsCookie_; }
      set {
        edgeEventsCookie_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 3;
    private global::DistributedMatchEngine.ClientEdgeEvent.Types.ClientEventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.ClientEdgeEvent.Types.ClientEventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "gps_location" field.</summary>
    public const int GpsLocationFieldNumber = 4;
    private global::DistributedMatchEngine.Loc gpsLocation_;
    /// <summary>
    /// GPS Location info if event_type is EVENT_LOCATION_UPDATE or EVENT_LATENCY_SAMPLES
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Loc GpsLocation {
      get { return gpsLocation_; }
      set {
        gpsLocation_ = value;
      }
    }

    /// <summary>Field number for the "samples" field.</summary>
    public const int SamplesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::DistributedMatchEngine.Sample> _repeated_samples_codec
        = pb::FieldCodec.ForMessage(42, global::DistributedMatchEngine.Sample.Parser);
    private readonly pbc::RepeatedField<global::DistributedMatchEngine.Sample> samples_ = new pbc::RepeatedField<global::DistributedMatchEngine.Sample>();
    /// <summary>
    /// Latency Samples if event_type is EVENT_LATENCY_SAMPLES or EVENT_CUSTOM_EVENT
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::DistributedMatchEngine.Sample> Samples {
      get { return samples_; }
    }

    /// <summary>Field number for the "device_info_static" field.</summary>
    public const int DeviceInfoStaticFieldNumber = 6;
    private global::DistributedMatchEngine.DeviceInfoStatic deviceInfoStatic_;
    /// <summary>
    /// 
    /// _(optional)_ Static device information for latency and deviceinfo stats 
    /// Send on EVENT_INIT_CONNECTION to get this information in latency stats and deviceinfo stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.DeviceInfoStatic DeviceInfoStatic {
      get { return deviceInfoStatic_; }
      set {
        deviceInfoStatic_ = value;
      }
    }

    /// <summary>Field number for the "device_info_dynamic" field.</summary>
    public const int DeviceInfoDynamicFieldNumber = 7;
    private global::DistributedMatchEngine.DeviceInfoDynamic deviceInfoDynamic_;
    /// <summary>
    ///
    /// _(optional)_ Dynamic device information for latency and deviceinfo stats
    /// Send on EVENT_INIT_CONNECTION to get this information in first deviceinfo stat
    /// Send on EVENT_LOCATION_UPDATE to get this information in dynamic deviceinfo stats
    /// Send on EVENT_LATENCY_SAMPLES to get this information in latency stats
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.DeviceInfoDynamic DeviceInfoDynamic {
      get { return deviceInfoDynamic_; }
      set {
        deviceInfoDynamic_ = value;
      }
    }

    /// <summary>Field number for the "custom_event" field.</summary>
    public const int CustomEventFieldNumber = 8;
    private string customEvent_ = "";
    /// <summary>
    /// Custom event specified by the application
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomEvent {
      get { return customEvent_; }
      set {
        customEvent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ClientEdgeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ClientEdgeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SessionCookie != other.SessionCookie) return false;
      if (EdgeEventsCookie != other.EdgeEventsCookie) return false;
      if (EventType != other.EventType) return false;
      if (!object.Equals(GpsLocation, other.GpsLocation)) return false;
      if(!samples_.Equals(other.samples_)) return false;
      if (!object.Equals(DeviceInfoStatic, other.DeviceInfoStatic)) return false;
      if (!object.Equals(DeviceInfoDynamic, other.DeviceInfoDynamic)) return false;
      if (CustomEvent != other.CustomEvent) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SessionCookie.Length != 0) hash ^= SessionCookie.GetHashCode();
      if (EdgeEventsCookie.Length != 0) hash ^= EdgeEventsCookie.GetHashCode();
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (gpsLocation_ != null) hash ^= GpsLocation.GetHashCode();
      hash ^= samples_.GetHashCode();
      if (deviceInfoStatic_ != null) hash ^= DeviceInfoStatic.GetHashCode();
      if (deviceInfoDynamic_ != null) hash ^= DeviceInfoDynamic.GetHashCode();
      if (CustomEvent.Length != 0) hash ^= CustomEvent.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SessionCookie.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SessionCookie);
      }
      if (EdgeEventsCookie.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EdgeEventsCookie);
      }
      if (EventType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) EventType);
      }
      if (gpsLocation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(GpsLocation);
      }
      samples_.WriteTo(output, _repeated_samples_codec);
      if (deviceInfoStatic_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(DeviceInfoStatic);
      }
      if (deviceInfoDynamic_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(DeviceInfoDynamic);
      }
      if (CustomEvent.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(CustomEvent);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SessionCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionCookie);
      }
      if (EdgeEventsCookie.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EdgeEventsCookie);
      }
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (gpsLocation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GpsLocation);
      }
      size += samples_.CalculateSize(_repeated_samples_codec);
      if (deviceInfoStatic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfoStatic);
      }
      if (deviceInfoDynamic_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfoDynamic);
      }
      if (CustomEvent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomEvent);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ClientEdgeEvent other) {
      if (other == null) {
        return;
      }
      if (other.SessionCookie.Length != 0) {
        SessionCookie = other.SessionCookie;
      }
      if (other.EdgeEventsCookie.Length != 0) {
        EdgeEventsCookie = other.EdgeEventsCookie;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.gpsLocation_ != null) {
        if (gpsLocation_ == null) {
          GpsLocation = new global::DistributedMatchEngine.Loc();
        }
        GpsLocation.MergeFrom(other.GpsLocation);
      }
      samples_.Add(other.samples_);
      if (other.deviceInfoStatic_ != null) {
        if (deviceInfoStatic_ == null) {
          DeviceInfoStatic = new global::DistributedMatchEngine.DeviceInfoStatic();
        }
        DeviceInfoStatic.MergeFrom(other.DeviceInfoStatic);
      }
      if (other.deviceInfoDynamic_ != null) {
        if (deviceInfoDynamic_ == null) {
          DeviceInfoDynamic = new global::DistributedMatchEngine.DeviceInfoDynamic();
        }
        DeviceInfoDynamic.MergeFrom(other.DeviceInfoDynamic);
      }
      if (other.CustomEvent.Length != 0) {
        CustomEvent = other.CustomEvent;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SessionCookie = input.ReadString();
            break;
          }
          case 18: {
            EdgeEventsCookie = input.ReadString();
            break;
          }
          case 24: {
            EventType = (global::DistributedMatchEngine.ClientEdgeEvent.Types.ClientEventType) input.ReadEnum();
            break;
          }
          case 34: {
            if (gpsLocation_ == null) {
              GpsLocation = new global::DistributedMatchEngine.Loc();
            }
            input.ReadMessage(GpsLocation);
            break;
          }
          case 42: {
            samples_.AddEntriesFrom(input, _repeated_samples_codec);
            break;
          }
          case 50: {
            if (deviceInfoStatic_ == null) {
              DeviceInfoStatic = new global::DistributedMatchEngine.DeviceInfoStatic();
            }
            input.ReadMessage(DeviceInfoStatic);
            break;
          }
          case 58: {
            if (deviceInfoDynamic_ == null) {
              DeviceInfoDynamic = new global::DistributedMatchEngine.DeviceInfoDynamic();
            }
            input.ReadMessage(DeviceInfoDynamic);
            break;
          }
          case 66: {
            CustomEvent = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ClientEdgeEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ClientEventType {
        [pbr::OriginalName("EVENT_UNKNOWN")] EventUnknown = 0,
        [pbr::OriginalName("EVENT_INIT_CONNECTION")] EventInitConnection = 1,
        [pbr::OriginalName("EVENT_TERMINATE_CONNECTION")] EventTerminateConnection = 2,
        [pbr::OriginalName("EVENT_LATENCY_SAMPLES")] EventLatencySamples = 3,
        [pbr::OriginalName("EVENT_LOCATION_UPDATE")] EventLocationUpdate = 4,
        [pbr::OriginalName("EVENT_CUSTOM_EVENT")] EventCustomEvent = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message from DME to SDK
  /// </summary>
  public sealed partial class ServerEdgeEvent : pb::IMessage<ServerEdgeEvent> {
    private static readonly pb::MessageParser<ServerEdgeEvent> _parser = new pb::MessageParser<ServerEdgeEvent>(() => new ServerEdgeEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ServerEdgeEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppClientReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEdgeEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEdgeEvent(ServerEdgeEvent other) : this() {
      eventType_ = other.eventType_;
      cloudletState_ = other.cloudletState_;
      maintenanceState_ = other.maintenanceState_;
      healthCheck_ = other.healthCheck_;
      statistics_ = other.statistics_ != null ? other.statistics_.Clone() : null;
      newCloudlet_ = other.newCloudlet_ != null ? other.newCloudlet_.Clone() : null;
      errorMsg_ = other.errorMsg_;
      tags_ = other.tags_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ServerEdgeEvent Clone() {
      return new ServerEdgeEvent(this);
    }

    /// <summary>Field number for the "event_type" field.</summary>
    public const int EventTypeFieldNumber = 1;
    private global::DistributedMatchEngine.ServerEdgeEvent.Types.ServerEventType eventType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.ServerEdgeEvent.Types.ServerEventType EventType {
      get { return eventType_; }
      set {
        eventType_ = value;
      }
    }

    /// <summary>Field number for the "cloudlet_state" field.</summary>
    public const int CloudletStateFieldNumber = 2;
    private global::DistributedMatchEngine.CloudletState cloudletState_ = 0;
    /// <summary>
    /// Cloudlet state information if cloudlet state is not CLOUDLET_STATE_READY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.CloudletState CloudletState {
      get { return cloudletState_; }
      set {
        cloudletState_ = value;
      }
    }

    /// <summary>Field number for the "maintenance_state" field.</summary>
    public const int MaintenanceStateFieldNumber = 3;
    private global::DistributedMatchEngine.MaintenanceState maintenanceState_ = 0;
    /// <summary>
    /// Cloudlet maintenance state information if maintenance state is not NORMAL_OPERATION
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.MaintenanceState MaintenanceState {
      get { return maintenanceState_; }
      set {
        maintenanceState_ = value;
      }
    }

    /// <summary>Field number for the "health_check" field.</summary>
    public const int HealthCheckFieldNumber = 4;
    private global::DistributedMatchEngine.HealthCheck healthCheck_ = 0;
    /// <summary>
    /// AppInst health state information if health check is not HEALTH_CHECK_OK
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.HealthCheck HealthCheck {
      get { return healthCheck_; }
      set {
        healthCheck_ = value;
      }
    }

    /// <summary>Field number for the "statistics" field.</summary>
    public const int StatisticsFieldNumber = 5;
    private global::DistributedMatchEngine.Statistics statistics_;
    /// <summary>
    /// Summarized RTT Latency stats from samples provided from client if event_type is EVENT_LATENCY
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.Statistics Statistics {
      get { return statistics_; }
      set {
        statistics_ = value;
      }
    }

    /// <summary>Field number for the "new_cloudlet" field.</summary>
    public const int NewCloudletFieldNumber = 6;
    private global::DistributedMatchEngine.FindCloudletReply newCloudlet_;
    /// <summary>
    /// 
    /// New and closer cloudlet if event_type is EVENT_CLOUDLET_UPDATE.
    /// (EVENT_CLOUDLET_UPDATE occurs if the client is closer to a different cloudlet, or a new closer appinst is created, or a previously down appinst/cloudlet that is closest to the client is now operational)
    /// Also sent on EVENT_CLOUDLET_STATE if another cloudlet is available
    /// Also sent on EVENT_CLOUDLET_MAINTENANCE, if another cloudlet is available and maintenance_state == UNDER_MAINTENANCE
    /// Also sent on EVENT_APPINST_HEALTH, if another cloudlet is available and health_check != HEALTH_CHECK_UNKNOWN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.FindCloudletReply NewCloudlet {
      get { return newCloudlet_; }
      set {
        newCloudlet_ = value;
      }
    }

    /// <summary>Field number for the "error_msg" field.</summary>
    public const int ErrorMsgFieldNumber = 7;
    private string errorMsg_ = "";
    /// <summary>
    /// Error message if event_type is EVENT_ERROR
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ErrorMsg {
      get { return errorMsg_; }
      set {
        errorMsg_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 100;
    private static readonly pbc::MapField<string, string>.Codec _map_tags_codec
        = new pbc::MapField<string, string>.Codec(pb::FieldCodec.ForString(10), pb::FieldCodec.ForString(18), 802);
    private readonly pbc::MapField<string, string> tags_ = new pbc::MapField<string, string>();
    /// <summary>
    /// _(optional)_ Vendor specific data
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, string> Tags {
      get { return tags_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ServerEdgeEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ServerEdgeEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EventType != other.EventType) return false;
      if (CloudletState != other.CloudletState) return false;
      if (MaintenanceState != other.MaintenanceState) return false;
      if (HealthCheck != other.HealthCheck) return false;
      if (!object.Equals(Statistics, other.Statistics)) return false;
      if (!object.Equals(NewCloudlet, other.NewCloudlet)) return false;
      if (ErrorMsg != other.ErrorMsg) return false;
      if (!Tags.Equals(other.Tags)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EventType != 0) hash ^= EventType.GetHashCode();
      if (CloudletState != 0) hash ^= CloudletState.GetHashCode();
      if (MaintenanceState != 0) hash ^= MaintenanceState.GetHashCode();
      if (HealthCheck != 0) hash ^= HealthCheck.GetHashCode();
      if (statistics_ != null) hash ^= Statistics.GetHashCode();
      if (newCloudlet_ != null) hash ^= NewCloudlet.GetHashCode();
      if (ErrorMsg.Length != 0) hash ^= ErrorMsg.GetHashCode();
      hash ^= Tags.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EventType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) EventType);
      }
      if (CloudletState != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) CloudletState);
      }
      if (MaintenanceState != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) MaintenanceState);
      }
      if (HealthCheck != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) HealthCheck);
      }
      if (statistics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Statistics);
      }
      if (newCloudlet_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(NewCloudlet);
      }
      if (ErrorMsg.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ErrorMsg);
      }
      tags_.WriteTo(output, _map_tags_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EventType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EventType);
      }
      if (CloudletState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) CloudletState);
      }
      if (MaintenanceState != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MaintenanceState);
      }
      if (HealthCheck != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HealthCheck);
      }
      if (statistics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Statistics);
      }
      if (newCloudlet_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewCloudlet);
      }
      if (ErrorMsg.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ErrorMsg);
      }
      size += tags_.CalculateSize(_map_tags_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ServerEdgeEvent other) {
      if (other == null) {
        return;
      }
      if (other.EventType != 0) {
        EventType = other.EventType;
      }
      if (other.CloudletState != 0) {
        CloudletState = other.CloudletState;
      }
      if (other.MaintenanceState != 0) {
        MaintenanceState = other.MaintenanceState;
      }
      if (other.HealthCheck != 0) {
        HealthCheck = other.HealthCheck;
      }
      if (other.statistics_ != null) {
        if (statistics_ == null) {
          Statistics = new global::DistributedMatchEngine.Statistics();
        }
        Statistics.MergeFrom(other.Statistics);
      }
      if (other.newCloudlet_ != null) {
        if (newCloudlet_ == null) {
          NewCloudlet = new global::DistributedMatchEngine.FindCloudletReply();
        }
        NewCloudlet.MergeFrom(other.NewCloudlet);
      }
      if (other.ErrorMsg.Length != 0) {
        ErrorMsg = other.ErrorMsg;
      }
      tags_.Add(other.tags_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            EventType = (global::DistributedMatchEngine.ServerEdgeEvent.Types.ServerEventType) input.ReadEnum();
            break;
          }
          case 16: {
            CloudletState = (global::DistributedMatchEngine.CloudletState) input.ReadEnum();
            break;
          }
          case 24: {
            MaintenanceState = (global::DistributedMatchEngine.MaintenanceState) input.ReadEnum();
            break;
          }
          case 32: {
            HealthCheck = (global::DistributedMatchEngine.HealthCheck) input.ReadEnum();
            break;
          }
          case 42: {
            if (statistics_ == null) {
              Statistics = new global::DistributedMatchEngine.Statistics();
            }
            input.ReadMessage(Statistics);
            break;
          }
          case 50: {
            if (newCloudlet_ == null) {
              NewCloudlet = new global::DistributedMatchEngine.FindCloudletReply();
            }
            input.ReadMessage(NewCloudlet);
            break;
          }
          case 58: {
            ErrorMsg = input.ReadString();
            break;
          }
          case 802: {
            tags_.AddEntriesFrom(input, _map_tags_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ServerEdgeEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ServerEventType {
        [pbr::OriginalName("EVENT_UNKNOWN")] EventUnknown = 0,
        [pbr::OriginalName("EVENT_INIT_CONNECTION")] EventInitConnection = 1,
        [pbr::OriginalName("EVENT_LATENCY_REQUEST")] EventLatencyRequest = 2,
        [pbr::OriginalName("EVENT_LATENCY_PROCESSED")] EventLatencyProcessed = 3,
        [pbr::OriginalName("EVENT_CLOUDLET_STATE")] EventCloudletState = 4,
        [pbr::OriginalName("EVENT_CLOUDLET_MAINTENANCE")] EventCloudletMaintenance = 5,
        [pbr::OriginalName("EVENT_APPINST_HEALTH")] EventAppinstHealth = 6,
        [pbr::OriginalName("EVENT_CLOUDLET_UPDATE")] EventCloudletUpdate = 7,
        [pbr::OriginalName("EVENT_ERROR")] EventError = 8,
      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
