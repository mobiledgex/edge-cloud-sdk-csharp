// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: appcommon.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace DistributedMatchEngine {

  /// <summary>Holder for reflection information generated from appcommon.proto</summary>
  public static partial class AppcommonReflection {

    #region Descriptor
    /// <summary>File descriptor for appcommon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AppcommonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9hcHBjb21tb24ucHJvdG8SGGRpc3RyaWJ1dGVkX21hdGNoX2VuZ2luZSKp",
            "AQoHQXBwUG9ydBIvCgVwcm90bxgBIAEoDjIgLmRpc3RyaWJ1dGVkX21hdGNo",
            "X2VuZ2luZS5MUHJvdG8SFQoNaW50ZXJuYWxfcG9ydBgCIAEoBRITCgtwdWJs",
            "aWNfcG9ydBgDIAEoBRITCgtmcWRuX3ByZWZpeBgFIAEoCRIQCghlbmRfcG9y",
            "dBgGIAEoBRILCgN0bHMYByABKAgSDQoFbmdpbngYCCABKAgiVgoHTGF0ZW5j",
            "eRILCgNhdmcYASABKAESCwoDbWluGAIgASgBEgsKA21heBgDIAEoARIPCgdz",
            "dGRfZGV2GAQgASgBEhMKC251bV9zYW1wbGVzGAUgASgEKj8KBkxQcm90bxIT",
            "Cg9MX1BST1RPX1VOS05PV04QABIPCgtMX1BST1RPX1RDUBABEg8KC0xfUFJP",
            "VE9fVURQEAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DistributedMatchEngine.LProto), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.AppPort), global::DistributedMatchEngine.AppPort.Parser, new[]{ "Proto", "InternalPort", "PublicPort", "FqdnPrefix", "EndPort", "Tls", "Nginx" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::DistributedMatchEngine.Latency), global::DistributedMatchEngine.Latency.Parser, new[]{ "Avg", "Min", "Max", "StdDev", "NumSamples" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// LProto indicates which protocol to use for accessing an application on a particular port. This is required by Kubernetes for port mapping.
  /// </summary>
  public enum LProto {
    /// <summary>
    /// Unknown protocol
    /// </summary>
    [pbr::OriginalName("L_PROTO_UNKNOWN")] Unknown = 0,
    /// <summary>
    /// TCP (L4) protocol
    /// </summary>
    [pbr::OriginalName("L_PROTO_TCP")] Tcp = 1,
    /// <summary>
    /// UDP (L4) protocol
    /// </summary>
    [pbr::OriginalName("L_PROTO_UDP")] Udp = 2,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Application Port
  ///
  /// AppPort describes an L4 or L7 public access port/path mapping. This is used to track external to internal mappings for access via a shared load balancer or reverse proxy.
  /// </summary>
  public sealed partial class AppPort : pb::IMessage<AppPort>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AppPort> _parser = new pb::MessageParser<AppPort>(() => new AppPort());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AppPort> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppcommonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppPort() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppPort(AppPort other) : this() {
      proto_ = other.proto_;
      internalPort_ = other.internalPort_;
      publicPort_ = other.publicPort_;
      fqdnPrefix_ = other.fqdnPrefix_;
      endPort_ = other.endPort_;
      tls_ = other.tls_;
      nginx_ = other.nginx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AppPort Clone() {
      return new AppPort(this);
    }

    /// <summary>Field number for the "proto" field.</summary>
    public const int ProtoFieldNumber = 1;
    private global::DistributedMatchEngine.LProto proto_ = global::DistributedMatchEngine.LProto.Unknown;
    /// <summary>
    /// TCP (L4) or UDP (L4) protocol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::DistributedMatchEngine.LProto Proto {
      get { return proto_; }
      set {
        proto_ = value;
      }
    }

    /// <summary>Field number for the "internal_port" field.</summary>
    public const int InternalPortFieldNumber = 2;
    private int internalPort_;
    /// <summary>
    /// Container port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int InternalPort {
      get { return internalPort_; }
      set {
        internalPort_ = value;
      }
    }

    /// <summary>Field number for the "public_port" field.</summary>
    public const int PublicPortFieldNumber = 3;
    private int publicPort_;
    /// <summary>
    /// Public facing port for TCP/UDP (may be mapped on shared LB reverse proxy)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PublicPort {
      get { return publicPort_; }
      set {
        publicPort_ = value;
      }
    }

    /// <summary>Field number for the "fqdn_prefix" field.</summary>
    public const int FqdnPrefixFieldNumber = 5;
    private string fqdnPrefix_ = "";
    /// <summary>
    /// skip 4 to preserve the numbering. 4 was path_prefix but was removed since we dont need it after removed http
    /// FQDN prefix to append to base FQDN in FindCloudlet response. May be empty.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FqdnPrefix {
      get { return fqdnPrefix_; }
      set {
        fqdnPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "end_port" field.</summary>
    public const int EndPortFieldNumber = 6;
    private int endPort_;
    /// <summary>
    /// A non-zero end port indicates a port range from internal port to end port, inclusive.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndPort {
      get { return endPort_; }
      set {
        endPort_ = value;
      }
    }

    /// <summary>Field number for the "tls" field.</summary>
    public const int TlsFieldNumber = 7;
    private bool tls_;
    /// <summary>
    /// TLS termination for this port
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Tls {
      get { return tls_; }
      set {
        tls_ = value;
      }
    }

    /// <summary>Field number for the "nginx" field.</summary>
    public const int NginxFieldNumber = 8;
    private bool nginx_;
    /// <summary>
    /// use nginx proxy for this port if you really need a transparent proxy (udp only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Nginx {
      get { return nginx_; }
      set {
        nginx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AppPort);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AppPort other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Proto != other.Proto) return false;
      if (InternalPort != other.InternalPort) return false;
      if (PublicPort != other.PublicPort) return false;
      if (FqdnPrefix != other.FqdnPrefix) return false;
      if (EndPort != other.EndPort) return false;
      if (Tls != other.Tls) return false;
      if (Nginx != other.Nginx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Proto != global::DistributedMatchEngine.LProto.Unknown) hash ^= Proto.GetHashCode();
      if (InternalPort != 0) hash ^= InternalPort.GetHashCode();
      if (PublicPort != 0) hash ^= PublicPort.GetHashCode();
      if (FqdnPrefix.Length != 0) hash ^= FqdnPrefix.GetHashCode();
      if (EndPort != 0) hash ^= EndPort.GetHashCode();
      if (Tls != false) hash ^= Tls.GetHashCode();
      if (Nginx != false) hash ^= Nginx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Proto != global::DistributedMatchEngine.LProto.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Proto);
      }
      if (InternalPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InternalPort);
      }
      if (PublicPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PublicPort);
      }
      if (FqdnPrefix.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FqdnPrefix);
      }
      if (EndPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndPort);
      }
      if (Tls != false) {
        output.WriteRawTag(56);
        output.WriteBool(Tls);
      }
      if (Nginx != false) {
        output.WriteRawTag(64);
        output.WriteBool(Nginx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Proto != global::DistributedMatchEngine.LProto.Unknown) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Proto);
      }
      if (InternalPort != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(InternalPort);
      }
      if (PublicPort != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(PublicPort);
      }
      if (FqdnPrefix.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FqdnPrefix);
      }
      if (EndPort != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(EndPort);
      }
      if (Tls != false) {
        output.WriteRawTag(56);
        output.WriteBool(Tls);
      }
      if (Nginx != false) {
        output.WriteRawTag(64);
        output.WriteBool(Nginx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Proto != global::DistributedMatchEngine.LProto.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Proto);
      }
      if (InternalPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(InternalPort);
      }
      if (PublicPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PublicPort);
      }
      if (FqdnPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FqdnPrefix);
      }
      if (EndPort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndPort);
      }
      if (Tls != false) {
        size += 1 + 1;
      }
      if (Nginx != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AppPort other) {
      if (other == null) {
        return;
      }
      if (other.Proto != global::DistributedMatchEngine.LProto.Unknown) {
        Proto = other.Proto;
      }
      if (other.InternalPort != 0) {
        InternalPort = other.InternalPort;
      }
      if (other.PublicPort != 0) {
        PublicPort = other.PublicPort;
      }
      if (other.FqdnPrefix.Length != 0) {
        FqdnPrefix = other.FqdnPrefix;
      }
      if (other.EndPort != 0) {
        EndPort = other.EndPort;
      }
      if (other.Tls != false) {
        Tls = other.Tls;
      }
      if (other.Nginx != false) {
        Nginx = other.Nginx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Proto = (global::DistributedMatchEngine.LProto) input.ReadEnum();
            break;
          }
          case 16: {
            InternalPort = input.ReadInt32();
            break;
          }
          case 24: {
            PublicPort = input.ReadInt32();
            break;
          }
          case 42: {
            FqdnPrefix = input.ReadString();
            break;
          }
          case 48: {
            EndPort = input.ReadInt32();
            break;
          }
          case 56: {
            Tls = input.ReadBool();
            break;
          }
          case 64: {
            Nginx = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Proto = (global::DistributedMatchEngine.LProto) input.ReadEnum();
            break;
          }
          case 16: {
            InternalPort = input.ReadInt32();
            break;
          }
          case 24: {
            PublicPort = input.ReadInt32();
            break;
          }
          case 42: {
            FqdnPrefix = input.ReadString();
            break;
          }
          case 48: {
            EndPort = input.ReadInt32();
            break;
          }
          case 56: {
            Tls = input.ReadBool();
            break;
          }
          case 64: {
            Nginx = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Latency
  /// </summary>
  public sealed partial class Latency : pb::IMessage<Latency>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Latency> _parser = new pb::MessageParser<Latency>(() => new Latency());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Latency> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::DistributedMatchEngine.AppcommonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency(Latency other) : this() {
      avg_ = other.avg_;
      min_ = other.min_;
      max_ = other.max_;
      stdDev_ = other.stdDev_;
      numSamples_ = other.numSamples_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Latency Clone() {
      return new Latency(this);
    }

    /// <summary>Field number for the "avg" field.</summary>
    public const int AvgFieldNumber = 1;
    private double avg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Avg {
      get { return avg_; }
      set {
        avg_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 2;
    private double min_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 3;
    private double max_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "std_dev" field.</summary>
    public const int StdDevFieldNumber = 4;
    private double stdDev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double StdDev {
      get { return stdDev_; }
      set {
        stdDev_ = value;
      }
    }

    /// <summary>Field number for the "num_samples" field.</summary>
    public const int NumSamplesFieldNumber = 5;
    private ulong numSamples_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong NumSamples {
      get { return numSamples_; }
      set {
        numSamples_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Latency);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Latency other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Avg, other.Avg)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StdDev, other.StdDev)) return false;
      if (NumSamples != other.NumSamples) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Avg != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Avg);
      if (Min != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Min);
      if (Max != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Max);
      if (StdDev != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StdDev);
      if (NumSamples != 0UL) hash ^= NumSamples.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Avg != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Avg);
      }
      if (Min != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Max);
      }
      if (StdDev != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StdDev);
      }
      if (NumSamples != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NumSamples);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Avg != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Avg);
      }
      if (Min != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Min);
      }
      if (Max != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Max);
      }
      if (StdDev != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(StdDev);
      }
      if (NumSamples != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(NumSamples);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Avg != 0D) {
        size += 1 + 8;
      }
      if (Min != 0D) {
        size += 1 + 8;
      }
      if (Max != 0D) {
        size += 1 + 8;
      }
      if (StdDev != 0D) {
        size += 1 + 8;
      }
      if (NumSamples != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumSamples);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Latency other) {
      if (other == null) {
        return;
      }
      if (other.Avg != 0D) {
        Avg = other.Avg;
      }
      if (other.Min != 0D) {
        Min = other.Min;
      }
      if (other.Max != 0D) {
        Max = other.Max;
      }
      if (other.StdDev != 0D) {
        StdDev = other.StdDev;
      }
      if (other.NumSamples != 0UL) {
        NumSamples = other.NumSamples;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Avg = input.ReadDouble();
            break;
          }
          case 17: {
            Min = input.ReadDouble();
            break;
          }
          case 25: {
            Max = input.ReadDouble();
            break;
          }
          case 33: {
            StdDev = input.ReadDouble();
            break;
          }
          case 40: {
            NumSamples = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Avg = input.ReadDouble();
            break;
          }
          case 17: {
            Min = input.ReadDouble();
            break;
          }
          case 25: {
            Max = input.ReadDouble();
            break;
          }
          case 33: {
            StdDev = input.ReadDouble();
            break;
          }
          case 40: {
            NumSamples = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
